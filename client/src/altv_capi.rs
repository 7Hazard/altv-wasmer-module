/* automatically generated by rust-bindgen */

# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_VectorLayout_float_4 { pub elements : [ f32 ; 4usize ] , } # [ test ] fn bindgen_test_layout_alt_VectorLayout_float_4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_VectorLayout_float_4 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_VectorLayout_float_4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_VectorLayout_float_4 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_VectorLayout_float_4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_VectorLayout_float_4 > ( ) ) ) . elements as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_VectorLayout_float_4 ) , "::" , stringify ! ( elements ) ) ) ; } extern "C" { pub fn alt_VectorLayout_float_4_free ( ptr : * mut alt_VectorLayout_float_4 ) ; } extern "C" { pub fn alt_VectorLayout_float_4_Create ( ) -> * mut alt_VectorLayout_float_4 ; } extern "C" { pub fn alt_VectorLayout_float_4_Create_2 ( el : * mut f32 ) -> * mut alt_VectorLayout_float_4 ; } extern "C" { pub fn alt_VectorLayout_float_4_Access_size_t ( _instance : * mut alt_VectorLayout_float_4 , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_VectorLayout_float_4_Access_size_t_1 ( _instance : * mut alt_VectorLayout_float_4 , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_VectorLayout_float_4_Create_3 ( _p0 : * mut alt_VectorLayout_float_4 ) -> * mut alt_VectorLayout_float_4 ; } extern "C" { pub fn alt_VectorLayout_float_4_Create_4 ( _p0 : * mut alt_VectorLayout_float_4 ) -> * mut alt_VectorLayout_float_4 ; } extern "C" { pub fn alt_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref ( _instance : * mut alt_VectorLayout_float_4 , _p0 : * mut alt_VectorLayout_float_4 ) ; } extern "C" { pub fn alt_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef ( _instance : * mut alt_VectorLayout_float_4 , _p0 : * mut alt_VectorLayout_float_4 ) ; } pub type alt_VectorLayout_float_4_Element = f32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_4_VectorLayout_float_4 { pub elements : [ f32 ; 4usize ] , } # [ test ] fn bindgen_test_layout_alt_Vector_float_4_VectorLayout_float_4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_Vector_float_4_VectorLayout_float_4 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_Vector_float_4_VectorLayout_float_4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_Vector_float_4_VectorLayout_float_4 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_Vector_float_4_VectorLayout_float_4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Vector_float_4_VectorLayout_float_4 > ( ) ) ) . elements as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_Vector_float_4_VectorLayout_float_4 ) , "::" , stringify ! ( elements ) ) ) ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_free ( ptr : * mut alt_Vector_float_4_VectorLayout_float_4 ) ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create ( ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_2 ( el : * mut f32 ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Access_size_t ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Access_size_t_1 ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_3 ( _p0 : * mut alt_VectorLayout_float_4 ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_4 ( _p0 : * mut alt_VectorLayout_float_4 ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 , _p0 : * mut alt_VectorLayout_float_4 ) ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 , _p0 : * mut alt_VectorLayout_float_4 ) ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_5 ( ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_7 ( layout : * mut alt_VectorLayout_float_4 ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_LengthSqr ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> f32 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Length ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> f32 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_8 ( _p0 : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Create_9 ( _p0 : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_constVector_float_4_VectorLayout_float_4Ref ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 , _p0 : * mut alt_Vector_float_4_VectorLayout_float_4 ) ; } extern "C" { pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_Vector_float_4_VectorLayout_float_4RefRef ( _instance : * mut alt_Vector_float_4_VectorLayout_float_4 , _p0 : * mut alt_Vector_float_4_VectorLayout_float_4 ) ; } pub type alt_Vector_float_4_VectorLayout_float_4_Layout = alt_VectorLayout_float_4 ; pub type alt_Vector_float_4_VectorLayout_float_4_Element = f32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_2_VectorLayout_float_2 { _unused : [ u8 ; 0 ] , } pub type alt_Vector2f = alt_Vector_float_2_VectorLayout_float_2 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_int_2_VectorLayout_int_2 { _unused : [ u8 ; 0 ] , } pub type alt_Vector2i = alt_Vector_int_2_VectorLayout_int_2 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_3_VectorLayout_float_3 { _unused : [ u8 ; 0 ] , } pub type alt_Vector3f = alt_Vector_float_3_VectorLayout_float_3 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_int_3_VectorLayout_int_3 { _unused : [ u8 ; 0 ] , } pub type alt_Vector3i = alt_Vector_int_3_VectorLayout_int_3 ; pub type alt_Vector4f = alt_Vector_float_4_VectorLayout_float_4 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_int_4_VectorLayout_int_4 { _unused : [ u8 ; 0 ] , } pub type alt_Vector4i = alt_Vector_int_4_VectorLayout_int_4 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Matrix_float_4_4_MatrixLayout_float_4_4 { _unused : [ u8 ; 0 ] , } pub type alt_DXMatrix = alt_Matrix_float_4_4_MatrixLayout_float_4_4 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_PointLayout { pub x : f32 , pub y : f32 , pub z : f32 , } # [ test ] fn bindgen_test_layout_alt_PointLayout ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_PointLayout > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( alt_PointLayout ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_PointLayout > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_PointLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointLayout > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointLayout ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointLayout > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointLayout ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointLayout > ( ) ) ) . z as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointLayout ) , "::" , stringify ! ( z ) ) ) ; } extern "C" { pub fn alt_PointLayout_free ( ptr : * mut alt_PointLayout ) ; } extern "C" { pub fn alt_PointLayout_Create ( ) -> * mut alt_PointLayout ; } extern "C" { pub fn alt_PointLayout_Create_1 ( _x : f32 , _y : f32 , _z : f32 ) -> * mut alt_PointLayout ; } extern "C" { pub fn alt_PointLayout_Create_2 ( elements : * mut f32 ) -> * mut alt_PointLayout ; } extern "C" { pub fn alt_PointLayout_Access_size_t ( _instance : * mut alt_PointLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_PointLayout_Access_size_t_1 ( _instance : * mut alt_PointLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_PointLayout_Create_3 ( _p0 : * mut alt_PointLayout ) -> * mut alt_PointLayout ; } extern "C" { pub fn alt_PointLayout_Create_4 ( _p0 : * mut alt_PointLayout ) -> * mut alt_PointLayout ; } pub type alt_PointLayout_Element = f32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_PointPaddedLayout { pub x : f32 , pub y : f32 , pub z : f32 , pub pad : f32 , } # [ test ] fn bindgen_test_layout_alt_PointPaddedLayout ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_PointPaddedLayout > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_PointPaddedLayout ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_PointPaddedLayout > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_PointPaddedLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointPaddedLayout > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointPaddedLayout ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointPaddedLayout > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointPaddedLayout ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointPaddedLayout > ( ) ) ) . z as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointPaddedLayout ) , "::" , stringify ! ( z ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_PointPaddedLayout > ( ) ) ) . pad as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( alt_PointPaddedLayout ) , "::" , stringify ! ( pad ) ) ) ; } extern "C" { pub fn alt_PointPaddedLayout_free ( ptr : * mut alt_PointPaddedLayout ) ; } extern "C" { pub fn alt_PointPaddedLayout_Create ( ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Create_1 ( _x : f32 , _y : f32 , _z : f32 ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Create_2 ( elements : * mut f32 ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Access_size_t ( _instance : * mut alt_PointPaddedLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_PointPaddedLayout_Access_size_t_1 ( _instance : * mut alt_PointPaddedLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_PointPaddedLayout_Create_3 ( _p0 : * mut alt_PointLayout ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Create_4 ( _p0 : * mut alt_PointLayout ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Create_5 ( ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Create_6 ( x : f32 , y : f32 , z : f32 ) -> * mut alt_PointPaddedLayout ; } extern "C" { pub fn alt_PointPaddedLayout_Create_7 ( elements : * mut f32 ) -> * mut alt_PointPaddedLayout ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_3_PointLayout { _unused : [ u8 ; 0 ] , } pub type alt_Point = alt_Vector_float_3_PointLayout ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_3_PointPaddedLayout { _unused : [ u8 ; 0 ] , } pub type alt_PointPadded = alt_Vector_float_3_PointPaddedLayout ; pub type alt_Position = alt_Vector_float_3_PointLayout ; pub type alt_PositionPadded = alt_Vector_float_3_PointPaddedLayout ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_RotationLayout { pub roll : f32 , pub pitch : f32 , pub yaw : f32 , } # [ test ] fn bindgen_test_layout_alt_RotationLayout ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_RotationLayout > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( alt_RotationLayout ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_RotationLayout > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_RotationLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationLayout > ( ) ) ) . roll as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationLayout ) , "::" , stringify ! ( roll ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationLayout > ( ) ) ) . pitch as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationLayout ) , "::" , stringify ! ( pitch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationLayout > ( ) ) ) . yaw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationLayout ) , "::" , stringify ! ( yaw ) ) ) ; } extern "C" { pub fn alt_RotationLayout_free ( ptr : * mut alt_RotationLayout ) ; } extern "C" { pub fn alt_RotationLayout_Create ( _roll : f32 , _pitch : f32 , _yaw : f32 ) -> * mut alt_RotationLayout ; } extern "C" { pub fn alt_RotationLayout_Create_1 ( ) -> * mut alt_RotationLayout ; } extern "C" { pub fn alt_RotationLayout_Create_2 ( elements : * mut f32 ) -> * mut alt_RotationLayout ; } extern "C" { pub fn alt_RotationLayout_Access_size_t ( _instance : * mut alt_RotationLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_RotationLayout_Access_size_t_1 ( _instance : * mut alt_RotationLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_RotationLayout_Normalize ( _instance : * mut alt_RotationLayout ) ; } extern "C" { pub fn alt_RotationLayout_Create_3 ( _p0 : * mut alt_RotationLayout ) -> * mut alt_RotationLayout ; } extern "C" { pub fn alt_RotationLayout_Create_4 ( _p0 : * mut alt_RotationLayout ) -> * mut alt_RotationLayout ; } pub type alt_RotationLayout_Element = f32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_RotationPaddedLayout { pub roll : f32 , pub pitch : f32 , pub yaw : f32 , pub pad : f32 , } # [ test ] fn bindgen_test_layout_alt_RotationPaddedLayout ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_RotationPaddedLayout > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_RotationPaddedLayout ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_RotationPaddedLayout > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_RotationPaddedLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationPaddedLayout > ( ) ) ) . roll as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationPaddedLayout ) , "::" , stringify ! ( roll ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationPaddedLayout > ( ) ) ) . pitch as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationPaddedLayout ) , "::" , stringify ! ( pitch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationPaddedLayout > ( ) ) ) . yaw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationPaddedLayout ) , "::" , stringify ! ( yaw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RotationPaddedLayout > ( ) ) ) . pad as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( alt_RotationPaddedLayout ) , "::" , stringify ! ( pad ) ) ) ; } extern "C" { pub fn alt_RotationPaddedLayout_free ( ptr : * mut alt_RotationPaddedLayout ) ; } extern "C" { pub fn alt_RotationPaddedLayout_Create ( _roll : f32 , _pitch : f32 , _yaw : f32 ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_1 ( ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_2 ( elements : * mut f32 ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Access_size_t ( _instance : * mut alt_RotationPaddedLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_RotationPaddedLayout_Access_size_t_1 ( _instance : * mut alt_RotationPaddedLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut f32 ; } extern "C" { pub fn alt_RotationPaddedLayout_Normalize ( _instance : * mut alt_RotationPaddedLayout ) ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_3 ( _p0 : * mut alt_RotationLayout ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_4 ( _p0 : * mut alt_RotationLayout ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_5 ( ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_6 ( roll : f32 , pitch : f32 , yaw : f32 ) -> * mut alt_RotationPaddedLayout ; } extern "C" { pub fn alt_RotationPaddedLayout_Create_7 ( elements : * mut f32 ) -> * mut alt_RotationPaddedLayout ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_3_RotationLayout { _unused : [ u8 ; 0 ] , } pub type alt_Rotation = alt_Vector_float_3_RotationLayout ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Vector_float_3_RotationPaddedLayout { _unused : [ u8 ; 0 ] , } pub type alt_RotationPadded = alt_Vector_float_3_RotationPaddedLayout ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_ViewMatrixLayout { pub right : alt_Vector_float_4_VectorLayout_float_4 , pub up : alt_Vector_float_4_VectorLayout_float_4 , pub forward : alt_Vector_float_4_VectorLayout_float_4 , pub pos : alt_Vector_float_4_VectorLayout_float_4 , } # [ test ] fn bindgen_test_layout_alt_ViewMatrixLayout ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_ViewMatrixLayout > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( alt_ViewMatrixLayout ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_ViewMatrixLayout > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_ViewMatrixLayout ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_ViewMatrixLayout > ( ) ) ) . right as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_ViewMatrixLayout ) , "::" , stringify ! ( right ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_ViewMatrixLayout > ( ) ) ) . up as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_ViewMatrixLayout ) , "::" , stringify ! ( up ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_ViewMatrixLayout > ( ) ) ) . forward as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( alt_ViewMatrixLayout ) , "::" , stringify ! ( forward ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_ViewMatrixLayout > ( ) ) ) . pos as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( alt_ViewMatrixLayout ) , "::" , stringify ! ( pos ) ) ) ; } extern "C" { pub fn alt_ViewMatrixLayout_free ( ptr : * mut alt_ViewMatrixLayout ) ; } extern "C" { pub fn alt_ViewMatrixLayout_Create ( ) -> * mut alt_ViewMatrixLayout ; } extern "C" { pub fn alt_ViewMatrixLayout_Create_1 ( _rows : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> * mut alt_ViewMatrixLayout ; } extern "C" { pub fn alt_ViewMatrixLayout_Create_2 ( row : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> * mut alt_ViewMatrixLayout ; } extern "C" { pub fn alt_ViewMatrixLayout_Create_3 ( elements : * mut f32 ) -> * mut alt_ViewMatrixLayout ; } extern "C" { pub fn alt_ViewMatrixLayout_Create_4 ( _right : * mut alt_Vector_float_4_VectorLayout_float_4 , _up : * mut alt_Vector_float_4_VectorLayout_float_4 , _forward : * mut alt_Vector_float_4_VectorLayout_float_4 , _pos : * mut alt_Vector_float_4_VectorLayout_float_4 ) -> * mut alt_ViewMatrixLayout ; } extern "C" { pub fn alt_ViewMatrixLayout_Access_size_t ( _instance : * mut alt_ViewMatrixLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } extern "C" { pub fn alt_ViewMatrixLayout_Access_size_t_1 ( _instance : * mut alt_ViewMatrixLayout , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_Vector_float_4_VectorLayout_float_4 ; } pub type alt_ViewMatrixLayout_Row = alt_Vector_float_4_VectorLayout_float_4 ; pub type alt_ViewMatrixLayout_Element = f32 ; pub type alt_ViewMatrixLayout_Transposed = alt_ViewMatrixLayout ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Matrix_float_4_4_ViewMatrixLayout { _unused : [ u8 ; 0 ] , } pub type alt_ViewMatrix = alt_Matrix_float_4_4_ViewMatrixLayout ; pub type alt_Size = :: std :: os :: raw :: c_ulonglong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_String { pub data : * mut :: std :: os :: raw :: c_char , pub size : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_String ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_String > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_String ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_String > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_String ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_String > ( ) ) ) . data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_String ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_String > ( ) ) ) . size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_String ) , "::" , stringify ! ( size ) ) ) ; } extern "C" { pub fn alt_String_Create ( _size : :: std :: os :: raw :: c_ulonglong , fill : :: std :: os :: raw :: c_char ) -> * mut alt_String ; } extern "C" { pub fn alt_String_Create_1 ( _data : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_String ; } extern "C" { pub fn alt_String_Create_2 ( ) -> * mut alt_String ; } extern "C" { pub fn alt_String_Create_3 ( _str : * mut :: std :: os :: raw :: c_char ) -> * mut alt_String ; } extern "C" { pub fn alt_String_Create_5 ( that : * mut alt_String ) -> * mut alt_String ; } extern "C" { pub fn alt_String_Create_6 ( that : * mut alt_String ) -> * mut alt_String ; } extern "C" { pub fn alt_String_Access_uint64_t ( _instance : * mut alt_String , key : :: std :: os :: raw :: c_ulonglong ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_String_Access_uint64_t_1 ( _instance : * mut alt_String , key : :: std :: os :: raw :: c_ulonglong ) -> :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_String_Assign_constStringRef ( _instance : * mut alt_String , that : * mut alt_String ) ; } extern "C" { pub fn alt_String_Assign_StringRefRef ( _instance : * mut alt_String , that : * mut alt_String ) ; } extern "C" { pub fn alt_String_IsEmpty ( _instance : * mut alt_String ) -> bool ; } extern "C" { pub fn alt_String_GetData ( _instance : * mut alt_String ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_String_GetData_1 ( _instance : * mut alt_String ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_String_GetSize ( _instance : * mut alt_String ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_String_Equals_String ( _instance : * mut alt_String , that : * mut alt_String ) -> bool ; } extern "C" { pub fn alt_String_NotEquals_String ( _instance : * mut alt_String , that : * mut alt_String ) -> bool ; } extern "C" { pub fn alt_String_CStr ( _instance : * mut alt_String ) -> * mut :: std :: os :: raw :: c_char ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_StringView { pub data : * const :: std :: os :: raw :: c_char , pub size : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_StringView ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_StringView > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_StringView ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_StringView > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_StringView ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_StringView > ( ) ) ) . data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_StringView ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_StringView > ( ) ) ) . size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_StringView ) , "::" , stringify ! ( size ) ) ) ; } extern "C" { pub fn alt_StringView_free ( ptr : * mut alt_StringView ) ; } extern "C" { pub fn alt_StringView_Create ( _data : * mut :: std :: os :: raw :: c_char , _size : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_StringView ; } extern "C" { pub fn alt_StringView_Create_1 ( ) -> * mut alt_StringView ; } extern "C" { pub fn alt_StringView_Create_2 ( _str : * mut :: std :: os :: raw :: c_char ) -> * mut alt_StringView ; } extern "C" { pub fn alt_StringView_Create_4 ( _str : * mut alt_String ) -> * mut alt_StringView ; } extern "C" { pub fn alt_StringView_IsEmpty ( _instance : * mut alt_StringView ) -> bool ; } extern "C" { pub fn alt_StringView_GetData ( _instance : * mut alt_StringView ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_StringView_GetSize ( _instance : * mut alt_StringView ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_StringView_Access_uint64_t ( _instance : * mut alt_StringView , key : :: std :: os :: raw :: c_ulonglong ) -> :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_StringView_Equals_StringView ( _instance : * mut alt_StringView , that : * mut alt_StringView ) -> bool ; } extern "C" { pub fn alt_StringView_NotEquals_StringView ( _instance : * mut alt_StringView , that : * mut alt_StringView ) -> bool ; } extern "C" { pub fn alt_StringView_To_String ( _instance : * mut alt_StringView ) -> * mut alt_String ; } extern "C" { pub fn alt_StringView_CStr ( _instance : * mut alt_StringView ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_StringView_Create_6 ( _p0 : * mut alt_StringView ) -> * mut alt_StringView ; } extern "C" { pub fn alt_StringView_Create_7 ( _p0 : * mut alt_StringView ) -> * mut alt_StringView ; } extern "C" { pub fn alt_StringView_Assign_constStringViewRef ( _instance : * mut alt_StringView , _p0 : * mut alt_StringView ) ; } extern "C" { pub fn alt_StringView_Assign_StringViewRefRef ( _instance : * mut alt_StringView , _p0 : * mut alt_StringView ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_RGBA { pub r : :: std :: os :: raw :: c_uchar , pub g : :: std :: os :: raw :: c_uchar , pub b : :: std :: os :: raw :: c_uchar , pub a : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_alt_RGBA ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_RGBA > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( alt_RGBA ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_RGBA > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_RGBA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RGBA > ( ) ) ) . r as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_RGBA ) , "::" , stringify ! ( r ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RGBA > ( ) ) ) . g as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( alt_RGBA ) , "::" , stringify ! ( g ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RGBA > ( ) ) ) . b as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( alt_RGBA ) , "::" , stringify ! ( b ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_RGBA > ( ) ) ) . a as * const _ as usize } , 3usize , concat ! ( "Offset of field: " , stringify ! ( alt_RGBA ) , "::" , stringify ! ( a ) ) ) ; } extern "C" { pub fn alt_RGBA_free ( ptr : * mut alt_RGBA ) ; } extern "C" { pub fn alt_RGBA_Create ( ) -> * mut alt_RGBA ; } extern "C" { pub fn alt_RGBA_Create_1 ( _r : :: std :: os :: raw :: c_uchar , _g : :: std :: os :: raw :: c_uchar , _b : :: std :: os :: raw :: c_uchar , _a : :: std :: os :: raw :: c_uchar ) -> * mut alt_RGBA ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Array_MValue { pub data : * mut alt_MValue , pub size : :: std :: os :: raw :: c_ulonglong , pub capacity : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_Array_MValue ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_Array_MValue > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( alt_Array_MValue ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_Array_MValue > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_Array_MValue ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_MValue > ( ) ) ) . data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_MValue ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_MValue > ( ) ) ) . size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_MValue ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_MValue > ( ) ) ) . capacity as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_MValue ) , "::" , stringify ! ( capacity ) ) ) ; } extern "C" { pub fn alt_Array_MValue_Create ( ) -> * mut alt_Array_MValue ; } extern "C" { pub fn alt_Array_MValue_Create_1 ( _data : * mut alt_MValue , _size : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_Array_MValue ; } extern "C" { pub fn alt_Array_MValue_Create_2 ( _size : :: std :: os :: raw :: c_ulonglong , fill : * mut alt_MValue ) -> * mut alt_Array_MValue ; } extern "C" { pub fn alt_Array_MValue_Create_3 ( that : * mut alt_Array_MValue ) -> * mut alt_Array_MValue ; } extern "C" { pub fn alt_Array_MValue_Create_4 ( that : * mut alt_Array_MValue ) -> * mut alt_Array_MValue ; } extern "C" { pub fn alt_Array_MValue_Assign_constArray_MValueRef ( _instance : * mut alt_Array_MValue , that : * mut alt_Array_MValue ) ; } extern "C" { pub fn alt_Array_MValue_Assign_Array_MValueRefRef ( _instance : * mut alt_Array_MValue , that : * mut alt_Array_MValue ) ; } extern "C" { pub fn alt_Array_MValue_Push ( _instance : * mut alt_Array_MValue , el : * mut alt_MValue ) ; } extern "C" { pub fn alt_Array_MValue_GetSize ( _instance : * mut alt_Array_MValue ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_Array_MValue_GetCapacity ( _instance : * mut alt_Array_MValue ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_Array_MValue_Access_uint64_t ( _instance : * mut alt_Array_MValue , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValue ; } extern "C" { pub fn alt_Array_MValue_Access_uint64_t_1 ( _instance : * mut alt_Array_MValue , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValue ; } extern "C" { pub fn alt_Array_MValue_begin ( _instance : * mut alt_Array_MValue ) -> * mut alt_MValue ; } extern "C" { pub fn alt_Array_MValue_begin_1 ( _instance : * mut alt_Array_MValue ) -> * mut alt_MValue ; } extern "C" { pub fn alt_Array_MValue_end ( _instance : * mut alt_Array_MValue ) -> * mut alt_MValue ; } extern "C" { pub fn alt_Array_MValue_end_1 ( _instance : * mut alt_Array_MValue ) -> * mut alt_MValue ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Array_String { pub data : * mut alt_String , pub size : :: std :: os :: raw :: c_ulonglong , pub capacity : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_Array_String ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_Array_String > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( alt_Array_String ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_Array_String > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_Array_String ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_String > ( ) ) ) . data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_String ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_String > ( ) ) ) . size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_String ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_String > ( ) ) ) . capacity as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_String ) , "::" , stringify ! ( capacity ) ) ) ; } extern "C" { pub fn alt_Array_String_Create ( ) -> * mut alt_Array_String ; } extern "C" { pub fn alt_Array_String_Create_1 ( _data : * mut alt_String , _size : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_Array_String ; } extern "C" { pub fn alt_Array_String_Create_2 ( _size : :: std :: os :: raw :: c_ulonglong , fill : * mut alt_String ) -> * mut alt_Array_String ; } extern "C" { pub fn alt_Array_String_Create_3 ( that : * mut alt_Array_String ) -> * mut alt_Array_String ; } extern "C" { pub fn alt_Array_String_Create_4 ( that : * mut alt_Array_String ) -> * mut alt_Array_String ; } extern "C" { pub fn alt_Array_String_Assign_constArray_StringRef ( _instance : * mut alt_Array_String , that : * mut alt_Array_String ) ; } extern "C" { pub fn alt_Array_String_Assign_Array_StringRefRef ( _instance : * mut alt_Array_String , that : * mut alt_Array_String ) ; } extern "C" { pub fn alt_Array_String_Push ( _instance : * mut alt_Array_String , el : * mut alt_String ) ; } extern "C" { pub fn alt_Array_String_GetSize ( _instance : * mut alt_Array_String ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_Array_String_GetCapacity ( _instance : * mut alt_Array_String ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_Array_String_Access_uint64_t ( _instance : * mut alt_Array_String , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_String ; } extern "C" { pub fn alt_Array_String_Access_uint64_t_1 ( _instance : * mut alt_Array_String , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_String ; } extern "C" { pub fn alt_Array_String_begin ( _instance : * mut alt_Array_String ) -> * mut alt_String ; } extern "C" { pub fn alt_Array_String_begin_1 ( _instance : * mut alt_Array_String ) -> * mut alt_String ; } extern "C" { pub fn alt_Array_String_end ( _instance : * mut alt_Array_String ) -> * mut alt_String ; } extern "C" { pub fn alt_Array_String_end_1 ( _instance : * mut alt_Array_String ) -> * mut alt_String ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Array_StringView { pub data : * mut alt_StringView , pub size : :: std :: os :: raw :: c_ulonglong , pub capacity : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_Array_StringView ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_Array_StringView > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( alt_Array_StringView ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_Array_StringView > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_Array_StringView ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_StringView > ( ) ) ) . data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_StringView ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_StringView > ( ) ) ) . size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_StringView ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_Array_StringView > ( ) ) ) . capacity as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_Array_StringView ) , "::" , stringify ! ( capacity ) ) ) ; } extern "C" { pub fn alt_Array_StringView_Create ( ) -> * mut alt_Array_StringView ; } extern "C" { pub fn alt_Array_StringView_Create_1 ( _data : * mut alt_StringView , _size : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_Array_StringView ; } extern "C" { pub fn alt_Array_StringView_Create_2 ( _size : :: std :: os :: raw :: c_ulonglong , fill : * mut alt_StringView ) -> * mut alt_Array_StringView ; } extern "C" { pub fn alt_Array_StringView_Create_3 ( that : * mut alt_Array_StringView ) -> * mut alt_Array_StringView ; } extern "C" { pub fn alt_Array_StringView_Create_4 ( that : * mut alt_Array_StringView ) -> * mut alt_Array_StringView ; } extern "C" { pub fn alt_Array_StringView_Assign_constArray_StringViewRef ( _instance : * mut alt_Array_StringView , that : * mut alt_Array_StringView ) ; } extern "C" { pub fn alt_Array_StringView_Assign_Array_StringViewRefRef ( _instance : * mut alt_Array_StringView , that : * mut alt_Array_StringView ) ; } extern "C" { pub fn alt_Array_StringView_Push ( _instance : * mut alt_Array_StringView , el : * mut alt_StringView ) ; } extern "C" { pub fn alt_Array_StringView_GetSize ( _instance : * mut alt_Array_StringView ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_Array_StringView_GetCapacity ( _instance : * mut alt_Array_StringView ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_Array_StringView_Access_uint64_t ( _instance : * mut alt_Array_StringView , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_StringView ; } extern "C" { pub fn alt_Array_StringView_Access_uint64_t_1 ( _instance : * mut alt_Array_StringView , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_StringView ; } extern "C" { pub fn alt_Array_StringView_begin ( _instance : * mut alt_Array_StringView ) -> * mut alt_StringView ; } extern "C" { pub fn alt_Array_StringView_begin_1 ( _instance : * mut alt_Array_StringView ) -> * mut alt_StringView ; } extern "C" { pub fn alt_Array_StringView_end ( _instance : * mut alt_Array_StringView ) -> * mut alt_StringView ; } extern "C" { pub fn alt_Array_StringView_end_1 ( _instance : * mut alt_Array_StringView ) -> * mut alt_StringView ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue { pub type_ : alt_MValue_Type , pub storage : * mut alt_MValue_Storage , } # [ test ] fn bindgen_test_layout_alt_MValue ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue > ( ) ) ) . storage as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue ) , "::" , stringify ! ( storage ) ) ) ; } extern "C" { pub fn alt_MValue_Create ( ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_1 ( val : * mut bool ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_2 ( val : * mut :: std :: os :: raw :: c_longlong ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_3 ( val : * mut :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_4 ( val : * mut f64 ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_5 ( val : * mut alt_String ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_6 ( val : * mut alt_Array_MValue ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_8 ( val : * mut * mut alt_IBaseObject ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_9 ( val : * mut alt_MValue_Function ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_10 ( val : :: std :: os :: raw :: c_int ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_11 ( val : :: std :: os :: raw :: c_uint ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_12 ( val : * mut :: std :: os :: raw :: c_char ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Create_14 ( that : * mut alt_MValue ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValue_Assign_constMValueRef ( _instance : * mut alt_MValue , that : * mut alt_MValue ) ; } extern "C" { pub fn alt_MValue_ToBool ( _instance : * mut alt_MValue ) -> bool ; } extern "C" { pub fn alt_MValue_ToInt ( _instance : * mut alt_MValue ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn alt_MValue_ToUInt ( _instance : * mut alt_MValue ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_MValue_ToString ( _instance : * mut alt_MValue ) -> * mut alt_String ; } extern "C" { pub fn alt_MValue_GetType ( _instance : * mut alt_MValue ) -> alt_MValue_Type ; } pub const alt_MValue_Type_ALT_MVALUE_TYPE_NIL : alt_MValue_Type = 0 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_BOOL : alt_MValue_Type = 1 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_INT : alt_MValue_Type = 2 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_UINT : alt_MValue_Type = 3 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_DOUBLE : alt_MValue_Type = 4 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_STRING : alt_MValue_Type = 5 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_LIST : alt_MValue_Type = 6 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_DICT : alt_MValue_Type = 7 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_ENTITY : alt_MValue_Type = 8 ; pub const alt_MValue_Type_ALT_MVALUE_TYPE_FUNCTION : alt_MValue_Type = 9 ; pub type alt_MValue_Type = i32 ; pub type alt_MValue_Nil = :: std :: os :: raw :: c_void ; pub type alt_MValue_Bool = bool ; pub type alt_MValue_Int = :: std :: os :: raw :: c_longlong ; pub type alt_MValue_UInt = :: std :: os :: raw :: c_ulonglong ; pub type alt_MValue_Double = f64 ; pub type alt_MValue_String = alt_String ; pub type alt_MValue_List = alt_Array_MValue ; pub type alt_MValue_Entity = * mut alt_IBaseObject ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Function { pub invoker : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_alt_MValue_Function ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Function > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Function ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Function > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Function ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Function > ( ) ) ) . invoker as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Function ) , "::" , stringify ! ( invoker ) ) ) ; } extern "C" { pub fn alt_MValue_Function_free ( ptr : * mut alt_MValue_Function ) ; } extern "C" { pub fn alt_MValue_Function_Create ( ) -> * mut alt_MValue_Function ; } extern "C" { pub fn alt_MValue_Function_Create_1 ( _p0 : * mut alt_MValue_Function ) -> * mut alt_MValue_Function ; } extern "C" { pub fn alt_MValue_Function_Create_2 ( _p0 : * mut alt_MValue_Function ) -> * mut alt_MValue_Function ; } extern "C" { pub fn alt_MValue_Function_Assign_constMValue_FunctionRef ( _instance : * mut alt_MValue_Function , _p0 : * mut alt_MValue_Function ) ; } extern "C" { pub fn alt_MValue_Function_Assign_MValue_FunctionRefRef ( _instance : * mut alt_MValue_Function , _p0 : * mut alt_MValue_Function ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_TypeMismatchException { _unused : [ u8 ; 0 ] , } extern "C" { pub fn alt_MValue_TypeMismatchException_free ( ptr : * mut alt_MValue_TypeMismatchException ) ; } extern "C" { pub fn alt_MValue_TypeMismatchException_what ( _instance : * mut alt_MValue_TypeMismatchException ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn alt_MValue_TypeMismatchException_Create ( _p0 : * mut alt_MValue_TypeMismatchException ) -> * mut alt_MValue_TypeMismatchException ; } extern "C" { pub fn alt_MValue_TypeMismatchException_Create_1 ( _p0 : * mut alt_MValue_TypeMismatchException ) -> * mut alt_MValue_TypeMismatchException ; } extern "C" { pub fn alt_MValue_TypeMismatchException_Assign_constMValue_TypeMismatchExceptionRef ( _instance : * mut alt_MValue_TypeMismatchException , _p0 : * mut alt_MValue_TypeMismatchException ) ; } extern "C" { pub fn alt_MValue_TypeMismatchException_Assign_MValue_TypeMismatchExceptionRefRef ( _instance : * mut alt_MValue_TypeMismatchException , _p0 : * mut alt_MValue_TypeMismatchException ) ; } extern "C" { pub fn alt_MValue_TypeMismatchException_Create_2 ( ) -> * mut alt_MValue_TypeMismatchException ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue__Storage { pub refCount : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_MValue__Storage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue__Storage > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( alt_MValue__Storage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue__Storage > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue__Storage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue__Storage > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue__Storage ) , "::" , stringify ! ( refCount ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage__Bool { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : bool , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage__Bool ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage__Bool > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage__Bool ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage__Bool > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage__Bool ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage__Bool > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage__Bool ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage__Bool > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage__Bool ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_longlong { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : :: std :: os :: raw :: c_longlong , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_longlong ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_longlong > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_longlong ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_longlong > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_longlong ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_longlong > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_longlong ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_longlong > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_longlong ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_unsignedlonglong { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_unsignedlonglong ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_unsignedlonglong > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_unsignedlonglong ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_unsignedlonglong > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_unsignedlonglong ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_unsignedlonglong > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_unsignedlonglong ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_unsignedlonglong > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_unsignedlonglong ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_double { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : f64 , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_double ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_double > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_double ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_double > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_double ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_double > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_double ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_double > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_double ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_String { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : alt_String , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_String ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_String > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_String ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_String > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_String ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_String > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_String ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_String > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_String ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_Array_MValue { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : alt_Array_MValue , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_Array_MValue ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_Array_MValue > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_Array_MValue ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_Array_MValue > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_Array_MValue ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_Array_MValue > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_Array_MValue ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_Array_MValue > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_Array_MValue ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_IBaseObjectPtr { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : * mut alt_IBaseObject , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_IBaseObjectPtr ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_IBaseObjectPtr > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_IBaseObjectPtr ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_IBaseObjectPtr > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_IBaseObjectPtr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_IBaseObjectPtr > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_IBaseObjectPtr ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_IBaseObjectPtr > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_IBaseObjectPtr ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage_MValue_Function { pub refCount : :: std :: os :: raw :: c_ulonglong , pub value : alt_MValue_Function , } # [ test ] fn bindgen_test_layout_alt_MValue_Storage_MValue_Function ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValue_Storage_MValue_Function > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValue_Storage_MValue_Function ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValue_Storage_MValue_Function > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValue_Storage_MValue_Function ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_MValue_Function > ( ) ) ) . refCount as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_MValue_Function ) , "::" , stringify ! ( refCount ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValue_Storage_MValue_Function > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValue_Storage_MValue_Function ) , "::" , stringify ! ( value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValueList { pub type_ : alt_MValue_Type , pub storage : * mut alt_MValue_Storage , } # [ test ] fn bindgen_test_layout_alt_MValueList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValueList > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValueList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValueList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValueList ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValueList > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValueList ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValueList > ( ) ) ) . storage as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValueList ) , "::" , stringify ! ( storage ) ) ) ; } extern "C" { pub fn alt_MValueList_free ( ptr : * mut alt_MValueList ) ; } extern "C" { pub fn alt_MValueList_Create ( ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_1 ( val : * mut bool ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_2 ( val : * mut :: std :: os :: raw :: c_longlong ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_3 ( val : * mut :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_4 ( val : * mut f64 ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_5 ( val : * mut alt_String ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_6 ( val : * mut alt_Array_MValue ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_8 ( val : * mut * mut alt_IBaseObject ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_9 ( val : * mut alt_MValue_Function ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_10 ( val : :: std :: os :: raw :: c_int ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_11 ( val : :: std :: os :: raw :: c_uint ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_12 ( val : * mut :: std :: os :: raw :: c_char ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_14 ( that : * mut alt_MValue ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Assign_constMValueRef ( _instance : * mut alt_MValueList , that : * mut alt_MValue ) ; } extern "C" { pub fn alt_MValueList_ToBool ( _instance : * mut alt_MValueList ) -> bool ; } extern "C" { pub fn alt_MValueList_ToInt ( _instance : * mut alt_MValueList ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn alt_MValueList_ToUInt ( _instance : * mut alt_MValueList ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_MValueList_ToString ( _instance : * mut alt_MValueList ) -> * mut alt_String ; } extern "C" { pub fn alt_MValueList_GetType ( _instance : * mut alt_MValueList ) -> alt_MValue_Type ; } extern "C" { pub fn alt_MValueList_Create_15 ( ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_16 ( size : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_17 ( list : * mut alt_Array_MValue ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_18 ( val : * mut alt_MValue ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_GetSize ( _instance : * mut alt_MValueList ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_MValueList_Access_uint64_t ( _instance : * mut alt_MValueList , key : :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValueList_To_Array_MValue ( _instance : * mut alt_MValueList ) -> * mut alt_Array_MValue ; } extern "C" { pub fn alt_MValueList_Push ( _instance : * mut alt_MValueList , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_MValueList_Create_19 ( _p0 : * mut alt_MValueList ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Create_20 ( _p0 : * mut alt_MValueList ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_MValueList_Assign_MValueListRefRef ( _instance : * mut alt_MValueList , _p0 : * mut alt_MValueList ) ; } extern "C" { pub fn alt_MValueList_Assign_constMValueListRef ( _instance : * mut alt_MValueList , _p0 : * mut alt_MValueList ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValueDict { pub type_ : alt_MValue_Type , pub storage : * mut alt_MValue_Storage , } # [ test ] fn bindgen_test_layout_alt_MValueDict ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValueDict > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValueDict ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValueDict > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValueDict ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValueDict > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValueDict ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValueDict > ( ) ) ) . storage as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValueDict ) , "::" , stringify ! ( storage ) ) ) ; } extern "C" { pub fn alt_MValueDict_free ( ptr : * mut alt_MValueDict ) ; } extern "C" { pub fn alt_MValueDict_Create ( ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_1 ( val : * mut bool ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_2 ( val : * mut :: std :: os :: raw :: c_longlong ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_3 ( val : * mut :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_4 ( val : * mut f64 ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_5 ( val : * mut alt_String ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_6 ( val : * mut alt_Array_MValue ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_8 ( val : * mut * mut alt_IBaseObject ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_9 ( val : * mut alt_MValue_Function ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_10 ( val : :: std :: os :: raw :: c_int ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_11 ( val : :: std :: os :: raw :: c_uint ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_12 ( val : * mut :: std :: os :: raw :: c_char ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_14 ( that : * mut alt_MValue ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Assign_constMValueRef ( _instance : * mut alt_MValueDict , that : * mut alt_MValue ) ; } extern "C" { pub fn alt_MValueDict_ToBool ( _instance : * mut alt_MValueDict ) -> bool ; } extern "C" { pub fn alt_MValueDict_ToInt ( _instance : * mut alt_MValueDict ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn alt_MValueDict_ToUInt ( _instance : * mut alt_MValueDict ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_MValueDict_ToString ( _instance : * mut alt_MValueDict ) -> * mut alt_String ; } extern "C" { pub fn alt_MValueDict_GetType ( _instance : * mut alt_MValueDict ) -> alt_MValue_Type ; } extern "C" { pub fn alt_MValueDict_Create_15 ( ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_17 ( val : * mut alt_MValue ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Access_String ( _instance : * mut alt_MValueDict , key : * mut alt_String ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValueDict_Create_18 ( _p0 : * mut alt_MValueDict ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Create_19 ( _p0 : * mut alt_MValueDict ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_MValueDict_Assign_MValueDictRefRef ( _instance : * mut alt_MValueDict , _p0 : * mut alt_MValueDict ) ; } extern "C" { pub fn alt_MValueDict_Assign_constMValueDictRef ( _instance : * mut alt_MValueDict , _p0 : * mut alt_MValueDict ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IResource { pub type_ : alt_String , pub name : alt_String , pub path : alt_String , pub main : alt_String , pub pkg : * mut alt_IPackage , pub state : alt_IResource_State , pub exports : alt_MValueDict , } # [ test ] fn bindgen_test_layout_alt_IResource ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IResource > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( alt_IResource ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IResource > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_IResource ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . name as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . path as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . main as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( main ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . pkg as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( pkg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . state as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource > ( ) ) ) . exports as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource ) , "::" , stringify ! ( exports ) ) ) ; } extern "C" { pub fn alt_IResource_GetState ( _instance : * mut alt_IResource ) -> alt_IResource_State ; } extern "C" { pub fn alt_IResource_IsStarted ( _instance : * mut alt_IResource ) -> bool ; } extern "C" { pub fn alt_IResource_GetType ( _instance : * mut alt_IResource ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IResource_GetName ( _instance : * mut alt_IResource ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IResource_GetPath ( _instance : * mut alt_IResource ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IResource_GetMain ( _instance : * mut alt_IResource ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IResource_GetPackage ( _instance : * mut alt_IResource ) -> * mut alt_IPackage ; } extern "C" { pub fn alt_IResource_GetExports ( _instance : * mut alt_IResource ) -> * mut alt_MValueDict ; } extern "C" { pub fn alt_IResource_Instantiate ( _instance : * mut alt_IResource ) -> bool ; } extern "C" { pub fn alt_IResource_Start ( _instance : * mut alt_IResource ) -> bool ; } extern "C" { pub fn alt_IResource_Stop ( _instance : * mut alt_IResource ) -> bool ; } extern "C" { pub fn alt_IResource_OnEvent ( _instance : * mut alt_IResource , ev : * mut alt_CEvent ) -> bool ; } extern "C" { pub fn alt_IResource_OnTick ( _instance : * mut alt_IResource ) ; } extern "C" { pub fn alt_IResource_OnCreateBaseObject ( _instance : * mut alt_IResource , object : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IResource_OnRemoveBaseObject ( _instance : * mut alt_IResource , object : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IResource_Create ( _p0 : * mut alt_IResource ) -> * mut alt_IResource ; } extern "C" { pub fn alt_IResource_Assign_constIResourceRef ( _instance : * mut alt_IResource , _p0 : * mut alt_IResource ) ; } pub const alt_IResource_State_ALT_IRESOURCE_STATE_STOPPED : alt_IResource_State = 0 ; pub const alt_IResource_State_ALT_IRESOURCE_STATE_INSTANTIATING : alt_IResource_State = 1 ; pub const alt_IResource_State_ALT_IRESOURCE_STATE_STARTED : alt_IResource_State = 2 ; pub type alt_IResource_State = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IResource_CreationInfo { pub type_ : alt_String , pub name : alt_String , pub path : alt_String , pub main : alt_String , pub deps : alt_Array_String , pub pkg : * mut alt_IPackage , } # [ test ] fn bindgen_test_layout_alt_IResource_CreationInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IResource_CreationInfo > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( alt_IResource_CreationInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IResource_CreationInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_IResource_CreationInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource_CreationInfo > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource_CreationInfo ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource_CreationInfo > ( ) ) ) . name as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource_CreationInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource_CreationInfo > ( ) ) ) . path as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource_CreationInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource_CreationInfo > ( ) ) ) . main as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource_CreationInfo ) , "::" , stringify ! ( main ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource_CreationInfo > ( ) ) ) . deps as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource_CreationInfo ) , "::" , stringify ! ( deps ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_IResource_CreationInfo > ( ) ) ) . pkg as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( alt_IResource_CreationInfo ) , "::" , stringify ! ( pkg ) ) ) ; } extern "C" { pub fn alt_IResource_CreationInfo_free ( ptr : * mut alt_IResource_CreationInfo ) ; } extern "C" { pub fn alt_IResource_CreationInfo_Create ( _p0 : * mut alt_IResource_CreationInfo ) -> * mut alt_IResource_CreationInfo ; } extern "C" { pub fn alt_IResource_CreationInfo_Create_1 ( _p0 : * mut alt_IResource_CreationInfo ) -> * mut alt_IResource_CreationInfo ; } extern "C" { pub fn alt_IResource_CreationInfo_Assign_IResource_CreationInfoRefRef ( _instance : * mut alt_IResource_CreationInfo , _p0 : * mut alt_IResource_CreationInfo ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValueFunction { pub type_ : alt_MValue_Type , pub storage : * mut alt_MValue_Storage , } # [ test ] fn bindgen_test_layout_alt_MValueFunction ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValueFunction > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_MValueFunction ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValueFunction > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_MValueFunction ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValueFunction > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValueFunction ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_MValueFunction > ( ) ) ) . storage as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_MValueFunction ) , "::" , stringify ! ( storage ) ) ) ; } extern "C" { pub fn alt_MValueFunction_free ( ptr : * mut alt_MValueFunction ) ; } extern "C" { pub fn alt_MValueFunction_Create ( ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_1 ( val : * mut bool ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_2 ( val : * mut :: std :: os :: raw :: c_longlong ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_3 ( val : * mut :: std :: os :: raw :: c_ulonglong ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_4 ( val : * mut f64 ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_5 ( val : * mut alt_String ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_6 ( val : * mut alt_Array_MValue ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_8 ( val : * mut * mut alt_IBaseObject ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_9 ( val : * mut alt_MValue_Function ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_10 ( val : :: std :: os :: raw :: c_int ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_11 ( val : :: std :: os :: raw :: c_uint ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_12 ( val : * mut :: std :: os :: raw :: c_char ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_14 ( that : * mut alt_MValue ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Assign_constMValueRef ( _instance : * mut alt_MValueFunction , that : * mut alt_MValue ) ; } extern "C" { pub fn alt_MValueFunction_ToBool ( _instance : * mut alt_MValueFunction ) -> bool ; } extern "C" { pub fn alt_MValueFunction_ToInt ( _instance : * mut alt_MValueFunction ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn alt_MValueFunction_ToUInt ( _instance : * mut alt_MValueFunction ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_MValueFunction_ToString ( _instance : * mut alt_MValueFunction ) -> * mut alt_String ; } extern "C" { pub fn alt_MValueFunction_GetType ( _instance : * mut alt_MValueFunction ) -> alt_MValue_Type ; } extern "C" { pub fn alt_MValueFunction_Create_15 ( func : * mut alt_MValue_Function ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_16 ( invoker : * mut alt_MValueFunction_Invoker ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_17 ( val : * mut alt_MValue ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_GetInvoker ( _instance : * mut alt_MValueFunction ) -> * mut alt_MValueFunction_Invoker ; } extern "C" { pub fn alt_MValueFunction_Create_18 ( _p0 : * mut alt_MValueFunction ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Create_19 ( _p0 : * mut alt_MValueFunction ) -> * mut alt_MValueFunction ; } extern "C" { pub fn alt_MValueFunction_Assign_MValueFunctionRefRef ( _instance : * mut alt_MValueFunction , _p0 : * mut alt_MValueFunction ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValueFunction_Invoker { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_MValueFunction_Invoker ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_MValueFunction_Invoker > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_MValueFunction_Invoker ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_MValueFunction_Invoker > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_MValueFunction_Invoker ) ) ) ; } extern "C" { pub fn alt_MValueFunction_Invoker_free ( ptr : * mut alt_MValueFunction_Invoker ) ; } extern "C" { pub fn alt_MValueFunction_Invoker_Invoke ( _instance : * mut alt_MValueFunction_Invoker , args : * mut alt_MValueList ) -> * mut alt_MValue ; } extern "C" { pub fn alt_MValueFunction_Invoker_Assign_constMValueFunction_InvokerRef ( _instance : * mut alt_MValueFunction_Invoker , _p0 : * mut alt_MValueFunction_Invoker ) ; } extern "C" { pub fn alt_MValueFunction_Invoker_Assign_MValueFunction_InvokerRefRef ( _instance : * mut alt_MValueFunction_Invoker , _p0 : * mut alt_MValueFunction_Invoker ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IBaseObject { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IBaseObject ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IBaseObject > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IBaseObject ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IBaseObject > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IBaseObject ) ) ) ; } extern "C" { pub fn alt_IBaseObject_GetType ( _instance : * mut alt_IBaseObject ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IBaseObject_GetMetaData ( _instance : * mut alt_IBaseObject , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IBaseObject_SetMetaData ( _instance : * mut alt_IBaseObject , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IBaseObject_Assign_constIBaseObjectRef ( _instance : * mut alt_IBaseObject , _p0 : * mut alt_IBaseObject ) ; } pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_PLAYER : alt_IBaseObject_Type = 0 ; pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_VEHICLE : alt_IBaseObject_Type = 1 ; pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_CHECKPOINT : alt_IBaseObject_Type = 2 ; pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_BLIP : alt_IBaseObject_Type = 3 ; pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_WEBVIEW : alt_IBaseObject_Type = 4 ; pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_VOICE_CHANNEL : alt_IBaseObject_Type = 5 ; pub const alt_IBaseObject_Type_ALT_IBASEOBJECT_TYPE_COLSHAPE : alt_IBaseObject_Type = 6 ; pub type alt_IBaseObject_Type = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IWorldObject { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IWorldObject ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IWorldObject > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IWorldObject ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IWorldObject > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IWorldObject ) ) ) ; } extern "C" { pub fn alt_IWorldObject_GetType ( _instance : * mut alt_IWorldObject ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IWorldObject_GetMetaData ( _instance : * mut alt_IWorldObject , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IWorldObject_SetMetaData ( _instance : * mut alt_IWorldObject , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IWorldObject_Assign_constIBaseObjectRef ( _instance : * mut alt_IWorldObject , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IWorldObject_GetPosition ( _instance : * mut alt_IWorldObject ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IWorldObject_GetDimension ( _instance : * mut alt_IWorldObject ) -> :: std :: os :: raw :: c_short ; } extern "C" { pub fn alt_IWorldObject_Assign_constIWorldObjectRef ( _instance : * mut alt_IWorldObject , _p0 : * mut alt_IWorldObject ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IEntity { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IEntity ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IEntity > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IEntity ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IEntity > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IEntity ) ) ) ; } extern "C" { pub fn alt_IEntity_GetType ( _instance : * mut alt_IEntity ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IEntity_GetMetaData ( _instance : * mut alt_IEntity , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IEntity_SetMetaData ( _instance : * mut alt_IEntity , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IEntity_Assign_constIBaseObjectRef ( _instance : * mut alt_IEntity , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IEntity_GetPosition ( _instance : * mut alt_IEntity ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IEntity_GetDimension ( _instance : * mut alt_IEntity ) -> :: std :: os :: raw :: c_short ; } extern "C" { pub fn alt_IEntity_Assign_constIWorldObjectRef ( _instance : * mut alt_IEntity , _p0 : * mut alt_IWorldObject ) ; } extern "C" { pub fn alt_IEntity_GetID ( _instance : * mut alt_IEntity ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IEntity_GetModel ( _instance : * mut alt_IEntity ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IEntity_GetRotation ( _instance : * mut alt_IEntity ) -> * mut alt_Vector_float_3_RotationLayout ; } extern "C" { pub fn alt_IEntity_SetRotation ( _instance : * mut alt_IEntity , rot : * mut alt_Vector_float_3_RotationLayout ) ; } extern "C" { pub fn alt_IEntity_GetSyncedMetaData ( _instance : * mut alt_IEntity , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IEntity_Assign_constIEntityRef ( _instance : * mut alt_IEntity , _p0 : * mut alt_IEntity ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IPlayer { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IPlayer ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IPlayer > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IPlayer ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IPlayer > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IPlayer ) ) ) ; } extern "C" { pub fn alt_IPlayer_GetType ( _instance : * mut alt_IPlayer ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IPlayer_GetMetaData ( _instance : * mut alt_IPlayer , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IPlayer_SetMetaData ( _instance : * mut alt_IPlayer , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IPlayer_Assign_constIBaseObjectRef ( _instance : * mut alt_IPlayer , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IPlayer_GetPosition ( _instance : * mut alt_IPlayer ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IPlayer_GetDimension ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_short ; } extern "C" { pub fn alt_IPlayer_Assign_constIWorldObjectRef ( _instance : * mut alt_IPlayer , _p0 : * mut alt_IWorldObject ) ; } extern "C" { pub fn alt_IPlayer_GetID ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IPlayer_GetModel ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IPlayer_GetRotation ( _instance : * mut alt_IPlayer ) -> * mut alt_Vector_float_3_RotationLayout ; } extern "C" { pub fn alt_IPlayer_SetRotation ( _instance : * mut alt_IPlayer , rot : * mut alt_Vector_float_3_RotationLayout ) ; } extern "C" { pub fn alt_IPlayer_GetSyncedMetaData ( _instance : * mut alt_IPlayer , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IPlayer_Assign_constIEntityRef ( _instance : * mut alt_IPlayer , _p0 : * mut alt_IEntity ) ; } extern "C" { pub fn alt_IPlayer_IsConnected ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_GetPing ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IPlayer_GetIP ( _instance : * mut alt_IPlayer ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IPlayer_Spawn ( _instance : * mut alt_IPlayer , pos : * mut alt_Vector_float_3_PointLayout , delayMs : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IPlayer_Despawn ( _instance : * mut alt_IPlayer ) ; } extern "C" { pub fn alt_IPlayer_GetName ( _instance : * mut alt_IPlayer ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IPlayer_SetName ( _instance : * mut alt_IPlayer , name : * mut alt_StringView ) ; } extern "C" { pub fn alt_IPlayer_GetHealth ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IPlayer_SetHealth ( _instance : * mut alt_IPlayer , health : :: std :: os :: raw :: c_ushort ) ; } extern "C" { pub fn alt_IPlayer_GetMaxHealth ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IPlayer_SetMaxHealth ( _instance : * mut alt_IPlayer , health : :: std :: os :: raw :: c_ushort ) ; } extern "C" { pub fn alt_IPlayer_SetDateTime ( _instance : * mut alt_IPlayer , day : :: std :: os :: raw :: c_int , month : :: std :: os :: raw :: c_int , year : :: std :: os :: raw :: c_int , hour : :: std :: os :: raw :: c_int , minute : :: std :: os :: raw :: c_int , second : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn alt_IPlayer_SetWeather ( _instance : * mut alt_IPlayer , weather : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IPlayer_GiveWeapon ( _instance : * mut alt_IPlayer , weapon : :: std :: os :: raw :: c_uint , ammo : :: std :: os :: raw :: c_int , selectWeapon : bool ) ; } extern "C" { pub fn alt_IPlayer_RemoveWeapon ( _instance : * mut alt_IPlayer , weapon : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IPlayer_RemoveAllWeapons ( _instance : * mut alt_IPlayer ) ; } extern "C" { pub fn alt_IPlayer_AddWeaponComponent ( _instance : * mut alt_IPlayer , weapon : :: std :: os :: raw :: c_uint , component : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IPlayer_RemoveWeaponComponent ( _instance : * mut alt_IPlayer , weapon : :: std :: os :: raw :: c_uint , component : :: std :: os :: raw :: c_uint ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_Array_unsignedint { _unused : [ u8 ; 0 ] , } extern "C" { pub fn alt_IPlayer_GetCurrentWeaponComponents ( _instance : * mut alt_IPlayer ) -> * mut alt_Array_unsignedint ; } extern "C" { pub fn alt_IPlayer_SetWeaponTintIndex ( _instance : * mut alt_IPlayer , weapon : :: std :: os :: raw :: c_uint , tintIndex : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IPlayer_GetCurrentWeaponTintIndex ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IPlayer_GetCurrentWeapon ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IPlayer_SetCurrentWeapon ( _instance : * mut alt_IPlayer , weapon : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IPlayer_IsDead ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_IsJumping ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_IsInRagdoll ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_IsAiming ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_IsShooting ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_IsReloading ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_GetArmour ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IPlayer_SetArmour ( _instance : * mut alt_IPlayer , armor : :: std :: os :: raw :: c_ushort ) ; } extern "C" { pub fn alt_IPlayer_GetMaxArmour ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IPlayer_SetMaxArmour ( _instance : * mut alt_IPlayer , armor : :: std :: os :: raw :: c_ushort ) ; } extern "C" { pub fn alt_IPlayer_GetMoveSpeed ( _instance : * mut alt_IPlayer ) -> f32 ; } extern "C" { pub fn alt_IPlayer_GetWeapon ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IPlayer_GetAmmo ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IPlayer_GetAimPos ( _instance : * mut alt_IPlayer ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IPlayer_GetHeadRotation ( _instance : * mut alt_IPlayer ) -> * mut alt_Vector_float_3_RotationLayout ; } extern "C" { pub fn alt_IPlayer_IsInVehicle ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_GetVehicle ( _instance : * mut alt_IPlayer ) -> * mut alt_IVehicle ; } extern "C" { pub fn alt_IPlayer_GetSeat ( _instance : * mut alt_IPlayer ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IPlayer_GetEntityAimingAt ( _instance : * mut alt_IPlayer ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_IPlayer_GetEntityAimOffset ( _instance : * mut alt_IPlayer ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IPlayer_IsFlashlightActive ( _instance : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IPlayer_Kick ( _instance : * mut alt_IPlayer , reason : * mut alt_StringView ) ; } extern "C" { pub fn alt_IPlayer_Assign_constIPlayerRef ( _instance : * mut alt_IPlayer , _p0 : * mut alt_IPlayer ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IVehicle { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IVehicle ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IVehicle > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IVehicle ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IVehicle > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IVehicle ) ) ) ; } extern "C" { pub fn alt_IVehicle_GetType ( _instance : * mut alt_IVehicle ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IVehicle_GetMetaData ( _instance : * mut alt_IVehicle , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IVehicle_SetMetaData ( _instance : * mut alt_IVehicle , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IVehicle_Assign_constIBaseObjectRef ( _instance : * mut alt_IVehicle , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IVehicle_GetPosition ( _instance : * mut alt_IVehicle ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IVehicle_GetDimension ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_short ; } extern "C" { pub fn alt_IVehicle_Assign_constIWorldObjectRef ( _instance : * mut alt_IVehicle , _p0 : * mut alt_IWorldObject ) ; } extern "C" { pub fn alt_IVehicle_GetID ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_IVehicle_GetModel ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IVehicle_GetRotation ( _instance : * mut alt_IVehicle ) -> * mut alt_Vector_float_3_RotationLayout ; } extern "C" { pub fn alt_IVehicle_SetRotation ( _instance : * mut alt_IVehicle , rot : * mut alt_Vector_float_3_RotationLayout ) ; } extern "C" { pub fn alt_IVehicle_GetSyncedMetaData ( _instance : * mut alt_IVehicle , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IVehicle_Assign_constIEntityRef ( _instance : * mut alt_IVehicle , _p0 : * mut alt_IEntity ) ; } extern "C" { pub fn alt_IVehicle_GetDriver ( _instance : * mut alt_IVehicle ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_IVehicle_GetMod ( _instance : * mut alt_IVehicle , category : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_GetModsCount ( _instance : * mut alt_IVehicle , category : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetMod ( _instance : * mut alt_IVehicle , category : :: std :: os :: raw :: c_uchar , id : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetModKitsCount ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_GetModKit ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetModKit ( _instance : * mut alt_IVehicle , id : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_IsPrimaryColorRGB ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetPrimaryColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_GetPrimaryColorRGB ( _instance : * mut alt_IVehicle ) -> * mut alt_RGBA ; } extern "C" { pub fn alt_IVehicle_SetPrimaryColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_SetPrimaryColorRGB ( _instance : * mut alt_IVehicle , color : * mut alt_RGBA ) ; } extern "C" { pub fn alt_IVehicle_IsSecondaryColorRGB ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetSecondaryColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_GetSecondaryColorRGB ( _instance : * mut alt_IVehicle ) -> * mut alt_RGBA ; } extern "C" { pub fn alt_IVehicle_SetSecondaryColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_SetSecondaryColorRGB ( _instance : * mut alt_IVehicle , color : * mut alt_RGBA ) ; } extern "C" { pub fn alt_IVehicle_GetPearlColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetPearlColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetWheelColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetWheelColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetInteriorColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetInteriorColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetDashboardColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetDashboardColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_IsTireSmokeColorCustom ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetTireSmokeColor ( _instance : * mut alt_IVehicle ) -> * mut alt_RGBA ; } extern "C" { pub fn alt_IVehicle_SetTireSmokeColor ( _instance : * mut alt_IVehicle , color : * mut alt_RGBA ) ; } extern "C" { pub fn alt_IVehicle_GetWheelType ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_GetWheelVariation ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetWheels ( _instance : * mut alt_IVehicle , type_ : :: std :: os :: raw :: c_uchar , variation : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetCustomTires ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetCustomTires ( _instance : * mut alt_IVehicle , state : bool ) ; } extern "C" { pub fn alt_IVehicle_GetSpecialDarkness ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetSpecialDarkness ( _instance : * mut alt_IVehicle , value : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetNumberplateIndex ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IVehicle_SetNumberplateIndex ( _instance : * mut alt_IVehicle , index : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IVehicle_GetNumberplateText ( _instance : * mut alt_IVehicle ) -> * mut alt_StringView ; } extern "C" { pub fn alt_IVehicle_SetNumberplateText ( _instance : * mut alt_IVehicle , text : * mut alt_StringView ) ; } extern "C" { pub fn alt_IVehicle_GetWindowTint ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetWindowTint ( _instance : * mut alt_IVehicle , tint : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetDirtLevel ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetDirtLevel ( _instance : * mut alt_IVehicle , level : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_IsExtraOn ( _instance : * mut alt_IVehicle , extraID : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_ToggleExtra ( _instance : * mut alt_IVehicle , extraID : :: std :: os :: raw :: c_uchar , state : bool ) ; } extern "C" { pub fn alt_IVehicle_IsNeonActive ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetNeonActive ( _instance : * mut alt_IVehicle , left : * mut bool , right : * mut bool , front : * mut bool , back : * mut bool ) ; } extern "C" { pub fn alt_IVehicle_SetNeonActive ( _instance : * mut alt_IVehicle , left : bool , right : bool , front : bool , back : bool ) ; } extern "C" { pub fn alt_IVehicle_GetNeonColor ( _instance : * mut alt_IVehicle ) -> * mut alt_RGBA ; } extern "C" { pub fn alt_IVehicle_SetNeonColor ( _instance : * mut alt_IVehicle , color : * mut alt_RGBA ) ; } extern "C" { pub fn alt_IVehicle_GetAppearanceDataBase64 ( _instance : * mut alt_IVehicle ) -> * mut alt_String ; } extern "C" { pub fn alt_IVehicle_LoadAppearanceDataFromBase64 ( _instance : * mut alt_IVehicle , base64 : * mut alt_StringView ) ; } extern "C" { pub fn alt_IVehicle_IsEngineOn ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetEngineOn ( _instance : * mut alt_IVehicle , state : bool ) ; } extern "C" { pub fn alt_IVehicle_IsHandbrakeActive ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetHeadlightColor ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetHeadlightColor ( _instance : * mut alt_IVehicle , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetRadioStationIndex ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IVehicle_SetRadioStationIndex ( _instance : * mut alt_IVehicle , stationIndex : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IVehicle_IsSirenActive ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetSirenActive ( _instance : * mut alt_IVehicle , state : bool ) ; } extern "C" { pub fn alt_IVehicle_GetLockState ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetLockState ( _instance : * mut alt_IVehicle , state : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetDoorState ( _instance : * mut alt_IVehicle , doorId : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetDoorState ( _instance : * mut alt_IVehicle , doorId : :: std :: os :: raw :: c_uchar , state : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_IsWindowOpened ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetWindowOpened ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar , state : bool ) ; } extern "C" { pub fn alt_IVehicle_IsDaylightOn ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_IsNightlightOn ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_IsRoofOpened ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetRoofOpened ( _instance : * mut alt_IVehicle , state : bool ) ; } extern "C" { pub fn alt_IVehicle_IsFlamethrowerActive ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetGameStateBase64 ( _instance : * mut alt_IVehicle ) -> * mut alt_String ; } extern "C" { pub fn alt_IVehicle_LoadGameStateFromBase64 ( _instance : * mut alt_IVehicle , base64 : * mut alt_StringView ) ; } extern "C" { pub fn alt_IVehicle_GetEngineHealth ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn alt_IVehicle_SetEngineHealth ( _instance : * mut alt_IVehicle , health : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn alt_IVehicle_GetPetrolTankHealth ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn alt_IVehicle_SetPetrolTankHealth ( _instance : * mut alt_IVehicle , health : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn alt_IVehicle_GetWheelsCount ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_IsWheelBurst ( _instance : * mut alt_IVehicle , wheelId : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetWheelBurst ( _instance : * mut alt_IVehicle , wheelId : :: std :: os :: raw :: c_uchar , state : bool ) ; } extern "C" { pub fn alt_IVehicle_DoesWheelHasTire ( _instance : * mut alt_IVehicle , wheelId : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetWheelHasTire ( _instance : * mut alt_IVehicle , wheelId : :: std :: os :: raw :: c_uchar , state : bool ) ; } extern "C" { pub fn alt_IVehicle_GetWheelHealth ( _instance : * mut alt_IVehicle , wheelId : :: std :: os :: raw :: c_uchar ) -> f32 ; } extern "C" { pub fn alt_IVehicle_SetWheelHealth ( _instance : * mut alt_IVehicle , wheelId : :: std :: os :: raw :: c_uchar , health : f32 ) ; } extern "C" { pub fn alt_IVehicle_GetRepairsCount ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_GetBodyHealth ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IVehicle_SetBodyHealth ( _instance : * mut alt_IVehicle , health : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IVehicle_GetBodyAdditionalHealth ( _instance : * mut alt_IVehicle ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_IVehicle_SetBodyAdditionalHealth ( _instance : * mut alt_IVehicle , health : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn alt_IVehicle_GetHealthDataBase64 ( _instance : * mut alt_IVehicle ) -> * mut alt_String ; } extern "C" { pub fn alt_IVehicle_LoadHealthDataFromBase64 ( _instance : * mut alt_IVehicle , base64 : * mut alt_StringView ) ; } extern "C" { pub fn alt_IVehicle_GetPartDamageLevel ( _instance : * mut alt_IVehicle , partId : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetPartDamageLevel ( _instance : * mut alt_IVehicle , partId : :: std :: os :: raw :: c_uchar , damage : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetPartBulletHoles ( _instance : * mut alt_IVehicle , partId : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetPartBulletHoles ( _instance : * mut alt_IVehicle , partId : :: std :: os :: raw :: c_uchar , shootsCount : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_IsLightDamaged ( _instance : * mut alt_IVehicle , lightId : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetLightDamaged ( _instance : * mut alt_IVehicle , lightId : :: std :: os :: raw :: c_uchar , isDamaged : bool ) ; } extern "C" { pub fn alt_IVehicle_IsWindowDamaged ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetWindowDamaged ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar , isDamaged : bool ) ; } extern "C" { pub fn alt_IVehicle_IsSpecialLightDamaged ( _instance : * mut alt_IVehicle , specialLightId : :: std :: os :: raw :: c_uchar ) -> bool ; } extern "C" { pub fn alt_IVehicle_SetSpecialLightDamaged ( _instance : * mut alt_IVehicle , specialLightId : :: std :: os :: raw :: c_uchar , isDamaged : bool ) ; } extern "C" { pub fn alt_IVehicle_HasArmoredWindows ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetArmoredWindowHealth ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar ) -> f32 ; } extern "C" { pub fn alt_IVehicle_SetArmoredWindowHealth ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar , health : f32 ) ; } extern "C" { pub fn alt_IVehicle_GetArmoredWindowShootCount ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetArmoredWindowShootCount ( _instance : * mut alt_IVehicle , windowId : :: std :: os :: raw :: c_uchar , count : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetBumperDamageLevel ( _instance : * mut alt_IVehicle , bumperId : :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_IVehicle_SetBumperDamageLevel ( _instance : * mut alt_IVehicle , bumperId : :: std :: os :: raw :: c_uchar , damageLevel : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IVehicle_GetDamageDataBase64 ( _instance : * mut alt_IVehicle ) -> * mut alt_String ; } extern "C" { pub fn alt_IVehicle_LoadDamageDataFromBase64 ( _instance : * mut alt_IVehicle , base64 : * mut alt_StringView ) ; } extern "C" { pub fn alt_IVehicle_SetManualEngineControl ( _instance : * mut alt_IVehicle , state : bool ) ; } extern "C" { pub fn alt_IVehicle_IsManualEngineControl ( _instance : * mut alt_IVehicle ) -> bool ; } extern "C" { pub fn alt_IVehicle_GetScriptDataBase64 ( _instance : * mut alt_IVehicle ) -> * mut alt_String ; } extern "C" { pub fn alt_IVehicle_LoadScriptDataFromBase64 ( _instance : * mut alt_IVehicle , base64 : * mut alt_StringView ) ; } extern "C" { pub fn alt_IVehicle_Assign_constIVehicleRef ( _instance : * mut alt_IVehicle , _p0 : * mut alt_IVehicle ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_ICheckpoint { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_ICheckpoint ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_ICheckpoint > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_ICheckpoint ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_ICheckpoint > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_ICheckpoint ) ) ) ; } extern "C" { pub fn alt_ICheckpoint_GetType ( _instance : * mut alt_ICheckpoint ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_ICheckpoint_GetMetaData ( _instance : * mut alt_ICheckpoint , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_ICheckpoint_SetMetaData ( _instance : * mut alt_ICheckpoint , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_ICheckpoint_Assign_constIBaseObjectRef ( _instance : * mut alt_ICheckpoint , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_ICheckpoint_GetPosition ( _instance : * mut alt_ICheckpoint ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_ICheckpoint_GetDimension ( _instance : * mut alt_ICheckpoint ) -> :: std :: os :: raw :: c_short ; } extern "C" { pub fn alt_ICheckpoint_Assign_constIWorldObjectRef ( _instance : * mut alt_ICheckpoint , _p0 : * mut alt_IWorldObject ) ; } extern "C" { pub fn alt_ICheckpoint_IsGlobal ( _instance : * mut alt_ICheckpoint ) -> bool ; } extern "C" { pub fn alt_ICheckpoint_GetTarget ( _instance : * mut alt_ICheckpoint ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_ICheckpoint_GetCheckpointType ( _instance : * mut alt_ICheckpoint ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_ICheckpoint_GetHeight ( _instance : * mut alt_ICheckpoint ) -> f32 ; } extern "C" { pub fn alt_ICheckpoint_GetRadius ( _instance : * mut alt_ICheckpoint ) -> f32 ; } extern "C" { pub fn alt_ICheckpoint_GetColor ( _instance : * mut alt_ICheckpoint ) -> * mut alt_RGBA ; } extern "C" { pub fn alt_ICheckpoint_IsEntityIn ( _instance : * mut alt_ICheckpoint , ent : * mut alt_IEntity ) -> bool ; } extern "C" { pub fn alt_ICheckpoint_Assign_constICheckpointRef ( _instance : * mut alt_ICheckpoint , _p0 : * mut alt_ICheckpoint ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IBlip { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IBlip ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IBlip > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IBlip ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IBlip > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IBlip ) ) ) ; } extern "C" { pub fn alt_IBlip_GetType ( _instance : * mut alt_IBlip ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IBlip_GetMetaData ( _instance : * mut alt_IBlip , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IBlip_SetMetaData ( _instance : * mut alt_IBlip , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IBlip_Assign_constIBaseObjectRef ( _instance : * mut alt_IBlip , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IBlip_GetPosition ( _instance : * mut alt_IBlip ) -> * mut alt_Vector_float_3_PointLayout ; } extern "C" { pub fn alt_IBlip_GetDimension ( _instance : * mut alt_IBlip ) -> :: std :: os :: raw :: c_short ; } extern "C" { pub fn alt_IBlip_Assign_constIWorldObjectRef ( _instance : * mut alt_IBlip , _p0 : * mut alt_IWorldObject ) ; } extern "C" { pub fn alt_IBlip_IsGlobal ( _instance : * mut alt_IBlip ) -> bool ; } extern "C" { pub fn alt_IBlip_GetTarget ( _instance : * mut alt_IBlip ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_IBlip_IsAttached ( _instance : * mut alt_IBlip ) -> bool ; } extern "C" { pub fn alt_IBlip_AttachedTo ( _instance : * mut alt_IBlip ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_IBlip_GetBlipType ( _instance : * mut alt_IBlip ) -> alt_IBlip_Type ; } extern "C" { pub fn alt_IBlip_SetSprite ( _instance : * mut alt_IBlip , sprite : :: std :: os :: raw :: c_ushort ) ; } extern "C" { pub fn alt_IBlip_SetColor ( _instance : * mut alt_IBlip , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IBlip_SetRoute ( _instance : * mut alt_IBlip , state : bool ) ; } extern "C" { pub fn alt_IBlip_SetRouteColor ( _instance : * mut alt_IBlip , color : :: std :: os :: raw :: c_uchar ) ; } extern "C" { pub fn alt_IBlip_Assign_constIBlipRef ( _instance : * mut alt_IBlip , _p0 : * mut alt_IBlip ) ; } pub const alt_IBlip_Type_ALT_IBLIP_TYPE_VEHICLE : alt_IBlip_Type = 1 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_PED : alt_IBlip_Type = 2 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_OBJECT : alt_IBlip_Type = 3 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_DESTINATION : alt_IBlip_Type = 4 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_CONT : alt_IBlip_Type = 5 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_PICKUP_UNK : alt_IBlip_Type = 6 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_RADIUS : alt_IBlip_Type = 7 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_PICKUP : alt_IBlip_Type = 8 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_COP : alt_IBlip_Type = 9 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_AREA : alt_IBlip_Type = 11 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_GALLERY : alt_IBlip_Type = 12 ; pub const alt_IBlip_Type_ALT_IBLIP_TYPE_PICKUP_OBJECT : alt_IBlip_Type = 13 ; pub type alt_IBlip_Type = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IVoiceChannel { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IVoiceChannel ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IVoiceChannel > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IVoiceChannel ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IVoiceChannel > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IVoiceChannel ) ) ) ; } extern "C" { pub fn alt_IVoiceChannel_GetType ( _instance : * mut alt_IVoiceChannel ) -> alt_IBaseObject_Type ; } extern "C" { pub fn alt_IVoiceChannel_GetMetaData ( _instance : * mut alt_IVoiceChannel , key : * mut alt_StringView ) -> * mut alt_MValue ; } extern "C" { pub fn alt_IVoiceChannel_SetMetaData ( _instance : * mut alt_IVoiceChannel , key : * mut alt_StringView , val : * mut alt_MValue ) ; } extern "C" { pub fn alt_IVoiceChannel_Assign_constIBaseObjectRef ( _instance : * mut alt_IVoiceChannel , _p0 : * mut alt_IBaseObject ) ; } extern "C" { pub fn alt_IVoiceChannel_AddPlayer ( _instance : * mut alt_IVoiceChannel , player : * mut alt_IPlayer ) ; } extern "C" { pub fn alt_IVoiceChannel_RemovePlayer ( _instance : * mut alt_IVoiceChannel , player : * mut alt_IPlayer ) ; } extern "C" { pub fn alt_IVoiceChannel_MutePlayer ( _instance : * mut alt_IVoiceChannel , player : * mut alt_IPlayer ) ; } extern "C" { pub fn alt_IVoiceChannel_UnmutePlayer ( _instance : * mut alt_IVoiceChannel , player : * mut alt_IPlayer ) ; } extern "C" { pub fn alt_IVoiceChannel_IsPlayerConnected ( _instance : * mut alt_IVoiceChannel , player : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IVoiceChannel_IsPlayerMuted ( _instance : * mut alt_IVoiceChannel , player : * mut alt_IPlayer ) -> bool ; } extern "C" { pub fn alt_IVoiceChannel_IsSpatial ( _instance : * mut alt_IVoiceChannel ) -> bool ; } extern "C" { pub fn alt_IVoiceChannel_GetMaxDistance ( _instance : * mut alt_IVoiceChannel ) -> f32 ; } extern "C" { pub fn alt_IVoiceChannel_Assign_constIVoiceChannelRef ( _instance : * mut alt_IVoiceChannel , _p0 : * mut alt_IVoiceChannel ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , } # [ test ] fn bindgen_test_layout_alt_CEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CEvent > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( alt_CEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CEvent > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_CEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CEvent ) , "::" , stringify ! ( cancelled ) ) ) ; } extern "C" { pub fn alt_CEvent_free ( ptr : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CEvent ; } extern "C" { pub fn alt_CEvent_GetType ( _instance : * mut alt_CEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CEvent_WasCancelled ( _instance : * mut alt_CEvent ) -> bool ; } extern "C" { pub fn alt_CEvent_Cancel ( _instance : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CEvent ; } extern "C" { pub fn alt_CEvent_Assign_constCEventRef ( _instance : * mut alt_CEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CEvent ; } extern "C" { pub fn alt_CEvent_Assign_CEventRefRef ( _instance : * mut alt_CEvent , _p0 : * mut alt_CEvent ) ; } pub const alt_CEvent_Type_ALT_CEVENT_TYPE_NONE : alt_CEvent_Type = 0 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_CONNECT : alt_CEvent_Type = 1 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_DISCONNECT : alt_CEvent_Type = 2 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT : alt_CEvent_Type = 3 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT : alt_CEvent_Type = 4 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_META_CHANGE : alt_CEvent_Type = 5 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_SYNCED_META_CHANGE : alt_CEvent_Type = 6 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_DAMAGE : alt_CEvent_Type = 7 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_DEATH : alt_CEvent_Type = 8 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_CHECKPOINT_EVENT : alt_CEvent_Type = 9 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_COLSHAPE_EVENT : alt_CEvent_Type = 10 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE : alt_CEvent_Type = 11 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE : alt_CEvent_Type = 12 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT : alt_CEvent_Type = 13 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT : alt_CEvent_Type = 14 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT : alt_CEvent_Type = 15 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT : alt_CEvent_Type = 16 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_CONNECTION_COMPLETE : alt_CEvent_Type = 17 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_DISCONNECT_EVENT : alt_CEvent_Type = 18 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_WEB_VIEW_EVENT : alt_CEvent_Type = 19 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_KEYBOARD_EVENT : alt_CEvent_Type = 20 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_GAME_ENTITY_CREATE : alt_CEvent_Type = 21 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY : alt_CEvent_Type = 22 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_ALL : alt_CEvent_Type = 23 ; pub const alt_CEvent_Type_ALT_CEVENT_TYPE_SIZE : alt_CEvent_Type = 24 ; pub type alt_CEvent_Type = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CServerScriptEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub name : alt_String , pub args : alt_MValueList , } # [ test ] fn bindgen_test_layout_alt_CServerScriptEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CServerScriptEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( alt_CServerScriptEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CServerScriptEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CServerScriptEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CServerScriptEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CServerScriptEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CServerScriptEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CServerScriptEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CServerScriptEvent > ( ) ) ) . name as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CServerScriptEvent ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CServerScriptEvent > ( ) ) ) . args as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CServerScriptEvent ) , "::" , stringify ! ( args ) ) ) ; } extern "C" { pub fn alt_CServerScriptEvent_free ( ptr : * mut alt_CServerScriptEvent ) ; } extern "C" { pub fn alt_CServerScriptEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CServerScriptEvent ; } extern "C" { pub fn alt_CServerScriptEvent_GetType ( _instance : * mut alt_CServerScriptEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CServerScriptEvent_WasCancelled ( _instance : * mut alt_CServerScriptEvent ) -> bool ; } extern "C" { pub fn alt_CServerScriptEvent_Cancel ( _instance : * mut alt_CServerScriptEvent ) ; } extern "C" { pub fn alt_CServerScriptEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CServerScriptEvent ; } extern "C" { pub fn alt_CServerScriptEvent_Assign_constCEventRef ( _instance : * mut alt_CServerScriptEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CServerScriptEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CServerScriptEvent ; } extern "C" { pub fn alt_CServerScriptEvent_Assign_CEventRefRef ( _instance : * mut alt_CServerScriptEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CServerScriptEvent_Create_3 ( _name : * mut alt_StringView , _args : * mut alt_MValueList ) -> * mut alt_CServerScriptEvent ; } extern "C" { pub fn alt_CServerScriptEvent_GetName ( _instance : * mut alt_CServerScriptEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CServerScriptEvent_GetArgs ( _instance : * mut alt_CServerScriptEvent ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_CServerScriptEvent_Create_4 ( _p0 : * mut alt_CServerScriptEvent ) -> * mut alt_CServerScriptEvent ; } extern "C" { pub fn alt_CServerScriptEvent_Create_5 ( _p0 : * mut alt_CServerScriptEvent ) -> * mut alt_CServerScriptEvent ; } extern "C" { pub fn alt_CServerScriptEvent_Assign_constCServerScriptEventRef ( _instance : * mut alt_CServerScriptEvent , _p0 : * mut alt_CServerScriptEvent ) ; } extern "C" { pub fn alt_CServerScriptEvent_Assign_CServerScriptEventRefRef ( _instance : * mut alt_CServerScriptEvent , _p0 : * mut alt_CServerScriptEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CClientScriptEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub name : alt_String , pub args : alt_MValueList , } # [ test ] fn bindgen_test_layout_alt_CClientScriptEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CClientScriptEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( alt_CClientScriptEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CClientScriptEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CClientScriptEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CClientScriptEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CClientScriptEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CClientScriptEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CClientScriptEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CClientScriptEvent > ( ) ) ) . name as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CClientScriptEvent ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CClientScriptEvent > ( ) ) ) . args as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CClientScriptEvent ) , "::" , stringify ! ( args ) ) ) ; } extern "C" { pub fn alt_CClientScriptEvent_free ( ptr : * mut alt_CClientScriptEvent ) ; } extern "C" { pub fn alt_CClientScriptEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CClientScriptEvent ; } extern "C" { pub fn alt_CClientScriptEvent_GetType ( _instance : * mut alt_CClientScriptEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CClientScriptEvent_WasCancelled ( _instance : * mut alt_CClientScriptEvent ) -> bool ; } extern "C" { pub fn alt_CClientScriptEvent_Cancel ( _instance : * mut alt_CClientScriptEvent ) ; } extern "C" { pub fn alt_CClientScriptEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CClientScriptEvent ; } extern "C" { pub fn alt_CClientScriptEvent_Assign_constCEventRef ( _instance : * mut alt_CClientScriptEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CClientScriptEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CClientScriptEvent ; } extern "C" { pub fn alt_CClientScriptEvent_Assign_CEventRefRef ( _instance : * mut alt_CClientScriptEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CClientScriptEvent_Create_3 ( _name : * mut alt_StringView , _args : * mut alt_MValueList ) -> * mut alt_CClientScriptEvent ; } extern "C" { pub fn alt_CClientScriptEvent_GetName ( _instance : * mut alt_CClientScriptEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CClientScriptEvent_GetArgs ( _instance : * mut alt_CClientScriptEvent ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_CClientScriptEvent_Create_4 ( _p0 : * mut alt_CClientScriptEvent ) -> * mut alt_CClientScriptEvent ; } extern "C" { pub fn alt_CClientScriptEvent_Create_5 ( _p0 : * mut alt_CClientScriptEvent ) -> * mut alt_CClientScriptEvent ; } extern "C" { pub fn alt_CClientScriptEvent_Assign_constCClientScriptEventRef ( _instance : * mut alt_CClientScriptEvent , _p0 : * mut alt_CClientScriptEvent ) ; } extern "C" { pub fn alt_CClientScriptEvent_Assign_CClientScriptEventRefRef ( _instance : * mut alt_CClientScriptEvent , _p0 : * mut alt_CClientScriptEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerConnectEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IPlayer , pub reason : alt_String , } # [ test ] fn bindgen_test_layout_alt_CPlayerConnectEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerConnectEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerConnectEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerConnectEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerConnectEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerConnectEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerConnectEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerConnectEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerConnectEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerConnectEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerConnectEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerConnectEvent > ( ) ) ) . reason as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerConnectEvent ) , "::" , stringify ! ( reason ) ) ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_free ( ptr : * mut alt_CPlayerConnectEvent ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerConnectEvent ; } extern "C" { pub fn alt_CPlayerConnectEvent_GetType ( _instance : * mut alt_CPlayerConnectEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerConnectEvent_WasCancelled ( _instance : * mut alt_CPlayerConnectEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerConnectEvent_Cancel ( _instance : * mut alt_CPlayerConnectEvent ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerConnectEvent ; } extern "C" { pub fn alt_CPlayerConnectEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerConnectEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerConnectEvent ; } extern "C" { pub fn alt_CPlayerConnectEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerConnectEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_Create_3 ( _target : * mut alt_IPlayer ) -> * mut alt_CPlayerConnectEvent ; } extern "C" { pub fn alt_CPlayerConnectEvent_GetTarget ( _instance : * mut alt_CPlayerConnectEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerConnectEvent_GetReason ( _instance : * mut alt_CPlayerConnectEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CPlayerConnectEvent_Cancel_1 ( _instance : * mut alt_CPlayerConnectEvent , _reason : * mut alt_StringView ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_Create_4 ( _p0 : * mut alt_CPlayerConnectEvent ) -> * mut alt_CPlayerConnectEvent ; } extern "C" { pub fn alt_CPlayerConnectEvent_Create_5 ( _p0 : * mut alt_CPlayerConnectEvent ) -> * mut alt_CPlayerConnectEvent ; } extern "C" { pub fn alt_CPlayerConnectEvent_Assign_constCPlayerConnectEventRef ( _instance : * mut alt_CPlayerConnectEvent , _p0 : * mut alt_CPlayerConnectEvent ) ; } extern "C" { pub fn alt_CPlayerConnectEvent_Assign_CPlayerConnectEventRefRef ( _instance : * mut alt_CPlayerConnectEvent , _p0 : * mut alt_CPlayerConnectEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerDisconnectEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IPlayer , pub reason : alt_String , } # [ test ] fn bindgen_test_layout_alt_CPlayerDisconnectEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerDisconnectEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerDisconnectEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerDisconnectEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerDisconnectEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDisconnectEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDisconnectEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDisconnectEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDisconnectEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDisconnectEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDisconnectEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDisconnectEvent > ( ) ) ) . reason as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDisconnectEvent ) , "::" , stringify ! ( reason ) ) ) ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_free ( ptr : * mut alt_CPlayerDisconnectEvent ) ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerDisconnectEvent ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_GetType ( _instance : * mut alt_CPlayerDisconnectEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_WasCancelled ( _instance : * mut alt_CPlayerDisconnectEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Cancel ( _instance : * mut alt_CPlayerDisconnectEvent ) ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerDisconnectEvent ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerDisconnectEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerDisconnectEvent ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerDisconnectEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Create_3 ( _target : * mut alt_IPlayer , _reason : * mut alt_StringView ) -> * mut alt_CPlayerDisconnectEvent ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_GetTarget ( _instance : * mut alt_CPlayerDisconnectEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_GetReason ( _instance : * mut alt_CPlayerDisconnectEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Create_4 ( _p0 : * mut alt_CPlayerDisconnectEvent ) -> * mut alt_CPlayerDisconnectEvent ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Create_5 ( _p0 : * mut alt_CPlayerDisconnectEvent ) -> * mut alt_CPlayerDisconnectEvent ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Assign_constCPlayerDisconnectEventRef ( _instance : * mut alt_CPlayerDisconnectEvent , _p0 : * mut alt_CPlayerDisconnectEvent ) ; } extern "C" { pub fn alt_CPlayerDisconnectEvent_Assign_CPlayerDisconnectEventRefRef ( _instance : * mut alt_CPlayerDisconnectEvent , _p0 : * mut alt_CPlayerDisconnectEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerDamageEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IPlayer , pub attacker : * mut alt_IEntity , pub damage : :: std :: os :: raw :: c_ushort , pub weapon : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_alt_CPlayerDamageEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerDamageEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerDamageEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerDamageEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerDamageEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDamageEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDamageEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDamageEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDamageEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDamageEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDamageEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDamageEvent > ( ) ) ) . attacker as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDamageEvent ) , "::" , stringify ! ( attacker ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDamageEvent > ( ) ) ) . damage as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDamageEvent ) , "::" , stringify ! ( damage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDamageEvent > ( ) ) ) . weapon as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDamageEvent ) , "::" , stringify ! ( weapon ) ) ) ; } extern "C" { pub fn alt_CPlayerDamageEvent_free ( ptr : * mut alt_CPlayerDamageEvent ) ; } extern "C" { pub fn alt_CPlayerDamageEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerDamageEvent ; } extern "C" { pub fn alt_CPlayerDamageEvent_GetType ( _instance : * mut alt_CPlayerDamageEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerDamageEvent_WasCancelled ( _instance : * mut alt_CPlayerDamageEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerDamageEvent_Cancel ( _instance : * mut alt_CPlayerDamageEvent ) ; } extern "C" { pub fn alt_CPlayerDamageEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerDamageEvent ; } extern "C" { pub fn alt_CPlayerDamageEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerDamageEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerDamageEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerDamageEvent ; } extern "C" { pub fn alt_CPlayerDamageEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerDamageEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerDamageEvent_Create_3 ( _target : * mut alt_IPlayer , _attacker : * mut alt_IEntity , _damage : :: std :: os :: raw :: c_ushort , _weapon : :: std :: os :: raw :: c_uint ) -> * mut alt_CPlayerDamageEvent ; } extern "C" { pub fn alt_CPlayerDamageEvent_GetTarget ( _instance : * mut alt_CPlayerDamageEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerDamageEvent_GetAttacker ( _instance : * mut alt_CPlayerDamageEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CPlayerDamageEvent_GetDamage ( _instance : * mut alt_CPlayerDamageEvent ) -> :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn alt_CPlayerDamageEvent_GetWeapon ( _instance : * mut alt_CPlayerDamageEvent ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_CPlayerDamageEvent_Create_4 ( _p0 : * mut alt_CPlayerDamageEvent ) -> * mut alt_CPlayerDamageEvent ; } extern "C" { pub fn alt_CPlayerDamageEvent_Assign_constCPlayerDamageEventRef ( _instance : * mut alt_CPlayerDamageEvent , _p0 : * mut alt_CPlayerDamageEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerDeathEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IPlayer , pub killer : * mut alt_IEntity , pub weapon : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_alt_CPlayerDeathEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerDeathEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerDeathEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerDeathEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerDeathEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDeathEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDeathEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDeathEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDeathEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDeathEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDeathEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDeathEvent > ( ) ) ) . killer as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDeathEvent ) , "::" , stringify ! ( killer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerDeathEvent > ( ) ) ) . weapon as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerDeathEvent ) , "::" , stringify ! ( weapon ) ) ) ; } extern "C" { pub fn alt_CPlayerDeathEvent_free ( ptr : * mut alt_CPlayerDeathEvent ) ; } extern "C" { pub fn alt_CPlayerDeathEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerDeathEvent ; } extern "C" { pub fn alt_CPlayerDeathEvent_GetType ( _instance : * mut alt_CPlayerDeathEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerDeathEvent_WasCancelled ( _instance : * mut alt_CPlayerDeathEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerDeathEvent_Cancel ( _instance : * mut alt_CPlayerDeathEvent ) ; } extern "C" { pub fn alt_CPlayerDeathEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerDeathEvent ; } extern "C" { pub fn alt_CPlayerDeathEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerDeathEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerDeathEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerDeathEvent ; } extern "C" { pub fn alt_CPlayerDeathEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerDeathEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerDeathEvent_Create_3 ( _target : * mut alt_IPlayer , _killer : * mut alt_IEntity , _weapon : :: std :: os :: raw :: c_uint ) -> * mut alt_CPlayerDeathEvent ; } extern "C" { pub fn alt_CPlayerDeathEvent_GetTarget ( _instance : * mut alt_CPlayerDeathEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerDeathEvent_GetKiller ( _instance : * mut alt_CPlayerDeathEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CPlayerDeathEvent_GetWeapon ( _instance : * mut alt_CPlayerDeathEvent ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_CPlayerDeathEvent_Create_4 ( _p0 : * mut alt_CPlayerDeathEvent ) -> * mut alt_CPlayerDeathEvent ; } extern "C" { pub fn alt_CPlayerDeathEvent_Assign_constCPlayerDeathEventRef ( _instance : * mut alt_CPlayerDeathEvent , _p0 : * mut alt_CPlayerDeathEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CCheckpointEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_ICheckpoint , pub entity : * mut alt_IEntity , pub state : bool , } # [ test ] fn bindgen_test_layout_alt_CCheckpointEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CCheckpointEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CCheckpointEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CCheckpointEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CCheckpointEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CCheckpointEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CCheckpointEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CCheckpointEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CCheckpointEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CCheckpointEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CCheckpointEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CCheckpointEvent > ( ) ) ) . entity as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CCheckpointEvent ) , "::" , stringify ! ( entity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CCheckpointEvent > ( ) ) ) . state as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CCheckpointEvent ) , "::" , stringify ! ( state ) ) ) ; } extern "C" { pub fn alt_CCheckpointEvent_free ( ptr : * mut alt_CCheckpointEvent ) ; } extern "C" { pub fn alt_CCheckpointEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CCheckpointEvent ; } extern "C" { pub fn alt_CCheckpointEvent_GetType ( _instance : * mut alt_CCheckpointEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CCheckpointEvent_WasCancelled ( _instance : * mut alt_CCheckpointEvent ) -> bool ; } extern "C" { pub fn alt_CCheckpointEvent_Cancel ( _instance : * mut alt_CCheckpointEvent ) ; } extern "C" { pub fn alt_CCheckpointEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CCheckpointEvent ; } extern "C" { pub fn alt_CCheckpointEvent_Assign_constCEventRef ( _instance : * mut alt_CCheckpointEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CCheckpointEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CCheckpointEvent ; } extern "C" { pub fn alt_CCheckpointEvent_Assign_CEventRefRef ( _instance : * mut alt_CCheckpointEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CCheckpointEvent_Create_3 ( _target : * mut alt_ICheckpoint , _entity : * mut alt_IEntity , _state : bool ) -> * mut alt_CCheckpointEvent ; } extern "C" { pub fn alt_CCheckpointEvent_GetTarget ( _instance : * mut alt_CCheckpointEvent ) -> * mut alt_ICheckpoint ; } extern "C" { pub fn alt_CCheckpointEvent_GetEntity ( _instance : * mut alt_CCheckpointEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CCheckpointEvent_GetState ( _instance : * mut alt_CCheckpointEvent ) -> bool ; } extern "C" { pub fn alt_CCheckpointEvent_Create_4 ( _p0 : * mut alt_CCheckpointEvent ) -> * mut alt_CCheckpointEvent ; } extern "C" { pub fn alt_CCheckpointEvent_Assign_constCCheckpointEventRef ( _instance : * mut alt_CCheckpointEvent , _p0 : * mut alt_CCheckpointEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CColShapeEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IColShape , pub entity : * mut alt_IEntity , pub state : bool , } # [ test ] fn bindgen_test_layout_alt_CColShapeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CColShapeEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CColShapeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CColShapeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CColShapeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CColShapeEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CColShapeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CColShapeEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CColShapeEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CColShapeEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CColShapeEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CColShapeEvent > ( ) ) ) . entity as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CColShapeEvent ) , "::" , stringify ! ( entity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CColShapeEvent > ( ) ) ) . state as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CColShapeEvent ) , "::" , stringify ! ( state ) ) ) ; } extern "C" { pub fn alt_CColShapeEvent_free ( ptr : * mut alt_CColShapeEvent ) ; } extern "C" { pub fn alt_CColShapeEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CColShapeEvent ; } extern "C" { pub fn alt_CColShapeEvent_GetType ( _instance : * mut alt_CColShapeEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CColShapeEvent_WasCancelled ( _instance : * mut alt_CColShapeEvent ) -> bool ; } extern "C" { pub fn alt_CColShapeEvent_Cancel ( _instance : * mut alt_CColShapeEvent ) ; } extern "C" { pub fn alt_CColShapeEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CColShapeEvent ; } extern "C" { pub fn alt_CColShapeEvent_Assign_constCEventRef ( _instance : * mut alt_CColShapeEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CColShapeEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CColShapeEvent ; } extern "C" { pub fn alt_CColShapeEvent_Assign_CEventRefRef ( _instance : * mut alt_CColShapeEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CColShapeEvent_Create_3 ( _target : * mut alt_IColShape , _entity : * mut alt_IEntity , _state : bool ) -> * mut alt_CColShapeEvent ; } extern "C" { pub fn alt_CColShapeEvent_GetTarget ( _instance : * mut alt_CColShapeEvent ) -> * mut alt_IColShape ; } extern "C" { pub fn alt_CColShapeEvent_GetEntity ( _instance : * mut alt_CColShapeEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CColShapeEvent_GetState ( _instance : * mut alt_CColShapeEvent ) -> bool ; } extern "C" { pub fn alt_CColShapeEvent_Create_4 ( _p0 : * mut alt_CColShapeEvent ) -> * mut alt_CColShapeEvent ; } extern "C" { pub fn alt_CColShapeEvent_Assign_constCColShapeEventRef ( _instance : * mut alt_CColShapeEvent , _p0 : * mut alt_CColShapeEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerEnterVehicleEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IVehicle , pub player : * mut alt_IPlayer , pub seat : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_alt_CPlayerEnterVehicleEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerEnterVehicleEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerEnterVehicleEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerEnterVehicleEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerEnterVehicleEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerEnterVehicleEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerEnterVehicleEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerEnterVehicleEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerEnterVehicleEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerEnterVehicleEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerEnterVehicleEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerEnterVehicleEvent > ( ) ) ) . player as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerEnterVehicleEvent ) , "::" , stringify ! ( player ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerEnterVehicleEvent > ( ) ) ) . seat as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerEnterVehicleEvent ) , "::" , stringify ! ( seat ) ) ) ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_free ( ptr : * mut alt_CPlayerEnterVehicleEvent ) ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerEnterVehicleEvent ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_GetType ( _instance : * mut alt_CPlayerEnterVehicleEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_WasCancelled ( _instance : * mut alt_CPlayerEnterVehicleEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Cancel ( _instance : * mut alt_CPlayerEnterVehicleEvent ) ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerEnterVehicleEvent ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerEnterVehicleEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerEnterVehicleEvent ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerEnterVehicleEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Create_3 ( _target : * mut alt_IVehicle , _player : * mut alt_IPlayer , _seat : :: std :: os :: raw :: c_uchar ) -> * mut alt_CPlayerEnterVehicleEvent ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_GetTarget ( _instance : * mut alt_CPlayerEnterVehicleEvent ) -> * mut alt_IVehicle ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_GetPlayer ( _instance : * mut alt_CPlayerEnterVehicleEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_GetSeat ( _instance : * mut alt_CPlayerEnterVehicleEvent ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Create_4 ( _p0 : * mut alt_CPlayerEnterVehicleEvent ) -> * mut alt_CPlayerEnterVehicleEvent ; } extern "C" { pub fn alt_CPlayerEnterVehicleEvent_Assign_constCPlayerEnterVehicleEventRef ( _instance : * mut alt_CPlayerEnterVehicleEvent , _p0 : * mut alt_CPlayerEnterVehicleEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerLeaveVehicleEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IVehicle , pub player : * mut alt_IPlayer , pub seat : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_alt_CPlayerLeaveVehicleEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerLeaveVehicleEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerLeaveVehicleEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerLeaveVehicleEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerLeaveVehicleEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerLeaveVehicleEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerLeaveVehicleEvent > ( ) ) ) . player as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) , "::" , stringify ! ( player ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerLeaveVehicleEvent > ( ) ) ) . seat as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerLeaveVehicleEvent ) , "::" , stringify ! ( seat ) ) ) ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_free ( ptr : * mut alt_CPlayerLeaveVehicleEvent ) ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerLeaveVehicleEvent ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_GetType ( _instance : * mut alt_CPlayerLeaveVehicleEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_WasCancelled ( _instance : * mut alt_CPlayerLeaveVehicleEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Cancel ( _instance : * mut alt_CPlayerLeaveVehicleEvent ) ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerLeaveVehicleEvent ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerLeaveVehicleEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerLeaveVehicleEvent ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerLeaveVehicleEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Create_3 ( _target : * mut alt_IVehicle , _player : * mut alt_IPlayer , _seat : :: std :: os :: raw :: c_uchar ) -> * mut alt_CPlayerLeaveVehicleEvent ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_GetTarget ( _instance : * mut alt_CPlayerLeaveVehicleEvent ) -> * mut alt_IVehicle ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_GetPlayer ( _instance : * mut alt_CPlayerLeaveVehicleEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_GetSeat ( _instance : * mut alt_CPlayerLeaveVehicleEvent ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Create_4 ( _p0 : * mut alt_CPlayerLeaveVehicleEvent ) -> * mut alt_CPlayerLeaveVehicleEvent ; } extern "C" { pub fn alt_CPlayerLeaveVehicleEvent_Assign_constCPlayerLeaveVehicleEventRef ( _instance : * mut alt_CPlayerLeaveVehicleEvent , _p0 : * mut alt_CPlayerLeaveVehicleEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CPlayerChangeVehicleSeatEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IVehicle , pub player : * mut alt_IPlayer , pub oldSeat : :: std :: os :: raw :: c_uchar , pub newSeat : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_alt_CPlayerChangeVehicleSeatEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CPlayerChangeVehicleSeatEvent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CPlayerChangeVehicleSeatEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerChangeVehicleSeatEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerChangeVehicleSeatEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerChangeVehicleSeatEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerChangeVehicleSeatEvent > ( ) ) ) . player as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) , "::" , stringify ! ( player ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerChangeVehicleSeatEvent > ( ) ) ) . oldSeat as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) , "::" , stringify ! ( oldSeat ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CPlayerChangeVehicleSeatEvent > ( ) ) ) . newSeat as * const _ as usize } , 25usize , concat ! ( "Offset of field: " , stringify ! ( alt_CPlayerChangeVehicleSeatEvent ) , "::" , stringify ! ( newSeat ) ) ) ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_free ( ptr : * mut alt_CPlayerChangeVehicleSeatEvent ) ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CPlayerChangeVehicleSeatEvent ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_GetType ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_WasCancelled ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) -> bool ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Cancel ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerChangeVehicleSeatEvent ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Assign_constCEventRef ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CPlayerChangeVehicleSeatEvent ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Assign_CEventRefRef ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Create_3 ( _target : * mut alt_IVehicle , _player : * mut alt_IPlayer , _oldSeat : :: std :: os :: raw :: c_uchar , _newSeat : :: std :: os :: raw :: c_uchar ) -> * mut alt_CPlayerChangeVehicleSeatEvent ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_GetTarget ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) -> * mut alt_IVehicle ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_GetPlayer ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) -> * mut alt_IPlayer ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_GetOldSeat ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_GetNewSeat ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent ) -> :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Create_4 ( _p0 : * mut alt_CPlayerChangeVehicleSeatEvent ) -> * mut alt_CPlayerChangeVehicleSeatEvent ; } extern "C" { pub fn alt_CPlayerChangeVehicleSeatEvent_Assign_constCPlayerChangeVehicleSeatEventRef ( _instance : * mut alt_CPlayerChangeVehicleSeatEvent , _p0 : * mut alt_CPlayerChangeVehicleSeatEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CDataNodeReceivedEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub name : alt_String , pub json : alt_String , } # [ test ] fn bindgen_test_layout_alt_CDataNodeReceivedEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CDataNodeReceivedEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( alt_CDataNodeReceivedEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CDataNodeReceivedEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CDataNodeReceivedEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CDataNodeReceivedEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CDataNodeReceivedEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CDataNodeReceivedEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CDataNodeReceivedEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CDataNodeReceivedEvent > ( ) ) ) . name as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CDataNodeReceivedEvent ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CDataNodeReceivedEvent > ( ) ) ) . json as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CDataNodeReceivedEvent ) , "::" , stringify ! ( json ) ) ) ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_free ( ptr : * mut alt_CDataNodeReceivedEvent ) ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CDataNodeReceivedEvent ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_GetType ( _instance : * mut alt_CDataNodeReceivedEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_WasCancelled ( _instance : * mut alt_CDataNodeReceivedEvent ) -> bool ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Cancel ( _instance : * mut alt_CDataNodeReceivedEvent ) ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CDataNodeReceivedEvent ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Assign_constCEventRef ( _instance : * mut alt_CDataNodeReceivedEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CDataNodeReceivedEvent ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Assign_CEventRefRef ( _instance : * mut alt_CDataNodeReceivedEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Create_3 ( _name : * mut alt_StringView , _logJson : * mut alt_StringView ) -> * mut alt_CDataNodeReceivedEvent ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_GetName ( _instance : * mut alt_CDataNodeReceivedEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_GetJson ( _instance : * mut alt_CDataNodeReceivedEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Create_4 ( _p0 : * mut alt_CDataNodeReceivedEvent ) -> * mut alt_CDataNodeReceivedEvent ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Create_5 ( _p0 : * mut alt_CDataNodeReceivedEvent ) -> * mut alt_CDataNodeReceivedEvent ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Assign_constCDataNodeReceivedEventRef ( _instance : * mut alt_CDataNodeReceivedEvent , _p0 : * mut alt_CDataNodeReceivedEvent ) ; } extern "C" { pub fn alt_CDataNodeReceivedEvent_Assign_CDataNodeReceivedEventRefRef ( _instance : * mut alt_CDataNodeReceivedEvent , _p0 : * mut alt_CDataNodeReceivedEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CRemoveEntityEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IEntity , } # [ test ] fn bindgen_test_layout_alt_CRemoveEntityEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CRemoveEntityEvent > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_CRemoveEntityEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CRemoveEntityEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CRemoveEntityEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CRemoveEntityEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CRemoveEntityEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CRemoveEntityEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CRemoveEntityEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CRemoveEntityEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CRemoveEntityEvent ) , "::" , stringify ! ( target ) ) ) ; } extern "C" { pub fn alt_CRemoveEntityEvent_free ( ptr : * mut alt_CRemoveEntityEvent ) ; } extern "C" { pub fn alt_CRemoveEntityEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CRemoveEntityEvent ; } extern "C" { pub fn alt_CRemoveEntityEvent_GetType ( _instance : * mut alt_CRemoveEntityEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CRemoveEntityEvent_WasCancelled ( _instance : * mut alt_CRemoveEntityEvent ) -> bool ; } extern "C" { pub fn alt_CRemoveEntityEvent_Cancel ( _instance : * mut alt_CRemoveEntityEvent ) ; } extern "C" { pub fn alt_CRemoveEntityEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CRemoveEntityEvent ; } extern "C" { pub fn alt_CRemoveEntityEvent_Assign_constCEventRef ( _instance : * mut alt_CRemoveEntityEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CRemoveEntityEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CRemoveEntityEvent ; } extern "C" { pub fn alt_CRemoveEntityEvent_Assign_CEventRefRef ( _instance : * mut alt_CRemoveEntityEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CRemoveEntityEvent_Create_3 ( _target : * mut alt_IEntity ) -> * mut alt_CRemoveEntityEvent ; } extern "C" { pub fn alt_CRemoveEntityEvent_GetEntity ( _instance : * mut alt_CRemoveEntityEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CRemoveEntityEvent_Create_4 ( _p0 : * mut alt_CRemoveEntityEvent ) -> * mut alt_CRemoveEntityEvent ; } extern "C" { pub fn alt_CRemoveEntityEvent_Assign_constCRemoveEntityEventRef ( _instance : * mut alt_CRemoveEntityEvent , _p0 : * mut alt_CRemoveEntityEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CConsoleCommandEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub name : alt_StringView , pub args : alt_Array_StringView , } # [ test ] fn bindgen_test_layout_alt_CConsoleCommandEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CConsoleCommandEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( alt_CConsoleCommandEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CConsoleCommandEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CConsoleCommandEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConsoleCommandEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConsoleCommandEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConsoleCommandEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConsoleCommandEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConsoleCommandEvent > ( ) ) ) . name as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConsoleCommandEvent ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConsoleCommandEvent > ( ) ) ) . args as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConsoleCommandEvent ) , "::" , stringify ! ( args ) ) ) ; } extern "C" { pub fn alt_CConsoleCommandEvent_free ( ptr : * mut alt_CConsoleCommandEvent ) ; } extern "C" { pub fn alt_CConsoleCommandEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CConsoleCommandEvent ; } extern "C" { pub fn alt_CConsoleCommandEvent_GetType ( _instance : * mut alt_CConsoleCommandEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CConsoleCommandEvent_WasCancelled ( _instance : * mut alt_CConsoleCommandEvent ) -> bool ; } extern "C" { pub fn alt_CConsoleCommandEvent_Cancel ( _instance : * mut alt_CConsoleCommandEvent ) ; } extern "C" { pub fn alt_CConsoleCommandEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CConsoleCommandEvent ; } extern "C" { pub fn alt_CConsoleCommandEvent_Assign_constCEventRef ( _instance : * mut alt_CConsoleCommandEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CConsoleCommandEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CConsoleCommandEvent ; } extern "C" { pub fn alt_CConsoleCommandEvent_Assign_CEventRefRef ( _instance : * mut alt_CConsoleCommandEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CConsoleCommandEvent_Create_3 ( _name : * mut alt_StringView , _args : * mut alt_Array_StringView ) -> * mut alt_CConsoleCommandEvent ; } extern "C" { pub fn alt_CConsoleCommandEvent_GetName ( _instance : * mut alt_CConsoleCommandEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CConsoleCommandEvent_GetArgs ( _instance : * mut alt_CConsoleCommandEvent ) -> * mut alt_Array_StringView ; } extern "C" { pub fn alt_CConsoleCommandEvent_Create_4 ( _p0 : * mut alt_CConsoleCommandEvent ) -> * mut alt_CConsoleCommandEvent ; } extern "C" { pub fn alt_CConsoleCommandEvent_Create_5 ( _p0 : * mut alt_CConsoleCommandEvent ) -> * mut alt_CConsoleCommandEvent ; } extern "C" { pub fn alt_CConsoleCommandEvent_Assign_constCConsoleCommandEventRef ( _instance : * mut alt_CConsoleCommandEvent , _p0 : * mut alt_CConsoleCommandEvent ) ; } extern "C" { pub fn alt_CConsoleCommandEvent_Assign_CConsoleCommandEventRefRef ( _instance : * mut alt_CConsoleCommandEvent , _p0 : * mut alt_CConsoleCommandEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CConnectionCompleteEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub isAnyMapLoaded : bool , } # [ test ] fn bindgen_test_layout_alt_CConnectionCompleteEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CConnectionCompleteEvent > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( alt_CConnectionCompleteEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CConnectionCompleteEvent > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_CConnectionCompleteEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConnectionCompleteEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConnectionCompleteEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConnectionCompleteEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConnectionCompleteEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CConnectionCompleteEvent > ( ) ) ) . isAnyMapLoaded as * const _ as usize } , 5usize , concat ! ( "Offset of field: " , stringify ! ( alt_CConnectionCompleteEvent ) , "::" , stringify ! ( isAnyMapLoaded ) ) ) ; } extern "C" { pub fn alt_CConnectionCompleteEvent_free ( ptr : * mut alt_CConnectionCompleteEvent ) ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CConnectionCompleteEvent ; } extern "C" { pub fn alt_CConnectionCompleteEvent_GetType ( _instance : * mut alt_CConnectionCompleteEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CConnectionCompleteEvent_WasCancelled ( _instance : * mut alt_CConnectionCompleteEvent ) -> bool ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Cancel ( _instance : * mut alt_CConnectionCompleteEvent ) ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CConnectionCompleteEvent ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Assign_constCEventRef ( _instance : * mut alt_CConnectionCompleteEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CConnectionCompleteEvent ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Assign_CEventRefRef ( _instance : * mut alt_CConnectionCompleteEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Create_3 ( _anyMapLoaded : bool ) -> * mut alt_CConnectionCompleteEvent ; } extern "C" { pub fn alt_CConnectionCompleteEvent_IsAnyMapLoaded ( _instance : * mut alt_CConnectionCompleteEvent ) -> bool ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Create_4 ( _p0 : * mut alt_CConnectionCompleteEvent ) -> * mut alt_CConnectionCompleteEvent ; } extern "C" { pub fn alt_CConnectionCompleteEvent_Assign_constCConnectionCompleteEventRef ( _instance : * mut alt_CConnectionCompleteEvent , _p0 : * mut alt_CConnectionCompleteEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CDisconnectEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , } # [ test ] fn bindgen_test_layout_alt_CDisconnectEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CDisconnectEvent > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( alt_CDisconnectEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CDisconnectEvent > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_CDisconnectEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CDisconnectEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CDisconnectEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CDisconnectEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CDisconnectEvent ) , "::" , stringify ! ( cancelled ) ) ) ; } extern "C" { pub fn alt_CDisconnectEvent_free ( ptr : * mut alt_CDisconnectEvent ) ; } extern "C" { pub fn alt_CDisconnectEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CDisconnectEvent ; } extern "C" { pub fn alt_CDisconnectEvent_GetType ( _instance : * mut alt_CDisconnectEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CDisconnectEvent_WasCancelled ( _instance : * mut alt_CDisconnectEvent ) -> bool ; } extern "C" { pub fn alt_CDisconnectEvent_Cancel ( _instance : * mut alt_CDisconnectEvent ) ; } extern "C" { pub fn alt_CDisconnectEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CDisconnectEvent ; } extern "C" { pub fn alt_CDisconnectEvent_Assign_constCEventRef ( _instance : * mut alt_CDisconnectEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CDisconnectEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CDisconnectEvent ; } extern "C" { pub fn alt_CDisconnectEvent_Assign_CEventRefRef ( _instance : * mut alt_CDisconnectEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CDisconnectEvent_Create_3 ( ) -> * mut alt_CDisconnectEvent ; } extern "C" { pub fn alt_CDisconnectEvent_Create_4 ( _p0 : * mut alt_CDisconnectEvent ) -> * mut alt_CDisconnectEvent ; } extern "C" { pub fn alt_CDisconnectEvent_Assign_constCDisconnectEventRef ( _instance : * mut alt_CDisconnectEvent , _p0 : * mut alt_CDisconnectEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CGameEntityCreateEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IEntity , } # [ test ] fn bindgen_test_layout_alt_CGameEntityCreateEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CGameEntityCreateEvent > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_CGameEntityCreateEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CGameEntityCreateEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CGameEntityCreateEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CGameEntityCreateEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CGameEntityCreateEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CGameEntityCreateEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CGameEntityCreateEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CGameEntityCreateEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CGameEntityCreateEvent ) , "::" , stringify ! ( target ) ) ) ; } extern "C" { pub fn alt_CGameEntityCreateEvent_free ( ptr : * mut alt_CGameEntityCreateEvent ) ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CGameEntityCreateEvent ; } extern "C" { pub fn alt_CGameEntityCreateEvent_GetType ( _instance : * mut alt_CGameEntityCreateEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CGameEntityCreateEvent_WasCancelled ( _instance : * mut alt_CGameEntityCreateEvent ) -> bool ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Cancel ( _instance : * mut alt_CGameEntityCreateEvent ) ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CGameEntityCreateEvent ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Assign_constCEventRef ( _instance : * mut alt_CGameEntityCreateEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CGameEntityCreateEvent ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Assign_CEventRefRef ( _instance : * mut alt_CGameEntityCreateEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Create_3 ( _target : * mut alt_IEntity ) -> * mut alt_CGameEntityCreateEvent ; } extern "C" { pub fn alt_CGameEntityCreateEvent_GetTarget ( _instance : * mut alt_CGameEntityCreateEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Create_4 ( _p0 : * mut alt_CGameEntityCreateEvent ) -> * mut alt_CGameEntityCreateEvent ; } extern "C" { pub fn alt_CGameEntityCreateEvent_Assign_constCGameEntityCreateEventRef ( _instance : * mut alt_CGameEntityCreateEvent , _p0 : * mut alt_CGameEntityCreateEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CGameEntityDestroyEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut alt_IEntity , } # [ test ] fn bindgen_test_layout_alt_CGameEntityDestroyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CGameEntityDestroyEvent > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_CGameEntityDestroyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CGameEntityDestroyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CGameEntityDestroyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CGameEntityDestroyEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CGameEntityDestroyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CGameEntityDestroyEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CGameEntityDestroyEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CGameEntityDestroyEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CGameEntityDestroyEvent ) , "::" , stringify ! ( target ) ) ) ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_free ( ptr : * mut alt_CGameEntityDestroyEvent ) ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CGameEntityDestroyEvent ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_GetType ( _instance : * mut alt_CGameEntityDestroyEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_WasCancelled ( _instance : * mut alt_CGameEntityDestroyEvent ) -> bool ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Cancel ( _instance : * mut alt_CGameEntityDestroyEvent ) ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CGameEntityDestroyEvent ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Assign_constCEventRef ( _instance : * mut alt_CGameEntityDestroyEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CGameEntityDestroyEvent ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Assign_CEventRefRef ( _instance : * mut alt_CGameEntityDestroyEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Create_3 ( _target : * mut alt_IEntity ) -> * mut alt_CGameEntityDestroyEvent ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_GetTarget ( _instance : * mut alt_CGameEntityDestroyEvent ) -> * mut alt_IEntity ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Create_4 ( _p0 : * mut alt_CGameEntityDestroyEvent ) -> * mut alt_CGameEntityDestroyEvent ; } extern "C" { pub fn alt_CGameEntityDestroyEvent_Assign_constCGameEntityDestroyEventRef ( _instance : * mut alt_CGameEntityDestroyEvent , _p0 : * mut alt_CGameEntityDestroyEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CKeyboardEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub keyCode : :: std :: os :: raw :: c_uint , pub keyState : alt_CKeyboardEvent_KeyState , } # [ test ] fn bindgen_test_layout_alt_CKeyboardEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CKeyboardEvent > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( alt_CKeyboardEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CKeyboardEvent > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( alt_CKeyboardEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CKeyboardEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CKeyboardEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CKeyboardEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CKeyboardEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CKeyboardEvent > ( ) ) ) . keyCode as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CKeyboardEvent ) , "::" , stringify ! ( keyCode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CKeyboardEvent > ( ) ) ) . keyState as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( alt_CKeyboardEvent ) , "::" , stringify ! ( keyState ) ) ) ; } extern "C" { pub fn alt_CKeyboardEvent_free ( ptr : * mut alt_CKeyboardEvent ) ; } extern "C" { pub fn alt_CKeyboardEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CKeyboardEvent ; } extern "C" { pub fn alt_CKeyboardEvent_GetType ( _instance : * mut alt_CKeyboardEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CKeyboardEvent_WasCancelled ( _instance : * mut alt_CKeyboardEvent ) -> bool ; } extern "C" { pub fn alt_CKeyboardEvent_Cancel ( _instance : * mut alt_CKeyboardEvent ) ; } extern "C" { pub fn alt_CKeyboardEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CKeyboardEvent ; } extern "C" { pub fn alt_CKeyboardEvent_Assign_constCEventRef ( _instance : * mut alt_CKeyboardEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CKeyboardEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CKeyboardEvent ; } extern "C" { pub fn alt_CKeyboardEvent_Assign_CEventRefRef ( _instance : * mut alt_CKeyboardEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CKeyboardEvent_Create_3 ( _keyCode : :: std :: os :: raw :: c_uint , state : alt_CKeyboardEvent_KeyState ) -> * mut alt_CKeyboardEvent ; } extern "C" { pub fn alt_CKeyboardEvent_GetKeyCode ( _instance : * mut alt_CKeyboardEvent ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_CKeyboardEvent_GetKeyState ( _instance : * mut alt_CKeyboardEvent ) -> alt_CKeyboardEvent_KeyState ; } extern "C" { pub fn alt_CKeyboardEvent_Create_4 ( _p0 : * mut alt_CKeyboardEvent ) -> * mut alt_CKeyboardEvent ; } extern "C" { pub fn alt_CKeyboardEvent_Assign_constCKeyboardEventRef ( _instance : * mut alt_CKeyboardEvent , _p0 : * mut alt_CKeyboardEvent ) ; } pub const alt_CKeyboardEvent_KeyState_ALT_CKEYBOARDEVENT_KEYSTATE_UP : alt_CKeyboardEvent_KeyState = 0 ; pub const alt_CKeyboardEvent_KeyState_ALT_CKEYBOARDEVENT_KEYSTATE_DOWN : alt_CKeyboardEvent_KeyState = 1 ; pub type alt_CKeyboardEvent_KeyState = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_CWebViewEvent { pub type_ : alt_CEvent_Type , pub cancelled : bool , pub target : * mut CWebView , pub name : alt_String , pub args : alt_MValueList , } # [ test ] fn bindgen_test_layout_alt_CWebViewEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_CWebViewEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( alt_CWebViewEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_CWebViewEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( alt_CWebViewEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CWebViewEvent > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( alt_CWebViewEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CWebViewEvent > ( ) ) ) . cancelled as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( alt_CWebViewEvent ) , "::" , stringify ! ( cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CWebViewEvent > ( ) ) ) . target as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( alt_CWebViewEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CWebViewEvent > ( ) ) ) . name as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( alt_CWebViewEvent ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < alt_CWebViewEvent > ( ) ) ) . args as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( alt_CWebViewEvent ) , "::" , stringify ! ( args ) ) ) ; } extern "C" { pub fn alt_CWebViewEvent_free ( ptr : * mut alt_CWebViewEvent ) ; } extern "C" { pub fn alt_CWebViewEvent_Create ( _type : alt_CEvent_Type ) -> * mut alt_CWebViewEvent ; } extern "C" { pub fn alt_CWebViewEvent_GetType ( _instance : * mut alt_CWebViewEvent ) -> alt_CEvent_Type ; } extern "C" { pub fn alt_CWebViewEvent_WasCancelled ( _instance : * mut alt_CWebViewEvent ) -> bool ; } extern "C" { pub fn alt_CWebViewEvent_Cancel ( _instance : * mut alt_CWebViewEvent ) ; } extern "C" { pub fn alt_CWebViewEvent_Create_1 ( _p0 : * mut alt_CEvent ) -> * mut alt_CWebViewEvent ; } extern "C" { pub fn alt_CWebViewEvent_Assign_constCEventRef ( _instance : * mut alt_CWebViewEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CWebViewEvent_Create_2 ( _p0 : * mut alt_CEvent ) -> * mut alt_CWebViewEvent ; } extern "C" { pub fn alt_CWebViewEvent_Assign_CEventRefRef ( _instance : * mut alt_CWebViewEvent , _p0 : * mut alt_CEvent ) ; } extern "C" { pub fn alt_CWebViewEvent_Create_3 ( _target : * mut CWebView , _name : * mut alt_StringView , _args : * mut alt_MValueList ) -> * mut alt_CWebViewEvent ; } extern "C" { pub fn alt_CWebViewEvent_GetTarget ( _instance : * mut alt_CWebViewEvent ) -> * mut CWebView ; } extern "C" { pub fn alt_CWebViewEvent_GetName ( _instance : * mut alt_CWebViewEvent ) -> * mut alt_StringView ; } extern "C" { pub fn alt_CWebViewEvent_GetArgs ( _instance : * mut alt_CWebViewEvent ) -> * mut alt_MValueList ; } extern "C" { pub fn alt_CWebViewEvent_Create_4 ( _p0 : * mut alt_CWebViewEvent ) -> * mut alt_CWebViewEvent ; } extern "C" { pub fn alt_CWebViewEvent_Create_5 ( _p0 : * mut alt_CWebViewEvent ) -> * mut alt_CWebViewEvent ; } extern "C" { pub fn alt_CWebViewEvent_Assign_constCWebViewEventRef ( _instance : * mut alt_CWebViewEvent , _p0 : * mut alt_CWebViewEvent ) ; } extern "C" { pub fn alt_CWebViewEvent_Assign_CWebViewEventRefRef ( _instance : * mut alt_CWebViewEvent , _p0 : * mut alt_CWebViewEvent ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IPackage { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IPackage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IPackage > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IPackage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IPackage > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IPackage ) ) ) ; } extern "C" { pub fn alt_IPackage_GetMode ( _instance : * mut alt_IPackage ) -> alt_IPackage_Mode ; } extern "C" { pub fn alt_IPackage_FileExists ( _instance : * mut alt_IPackage , path : * mut alt_StringView ) -> bool ; } extern "C" { pub fn alt_IPackage_OpenFile ( _instance : * mut alt_IPackage , path : * mut alt_StringView ) -> * mut alt_IPackage_File ; } extern "C" { pub fn alt_IPackage_CloseFile ( _instance : * mut alt_IPackage , file : * mut alt_IPackage_File ) ; } extern "C" { pub fn alt_IPackage_GetFileSize ( _instance : * mut alt_IPackage , file : * mut alt_IPackage_File ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_IPackage_SeekFile ( _instance : * mut alt_IPackage , file : * mut alt_IPackage_File , offset : :: std :: os :: raw :: c_ulonglong , origin : alt_IPackage_SeekOrigin ) ; } extern "C" { pub fn alt_IPackage_TellFile ( _instance : * mut alt_IPackage , file : * mut alt_IPackage_File ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_IPackage_ReadFile ( _instance : * mut alt_IPackage , file : * mut alt_IPackage_File , buffer : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_ulonglong ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn alt_IPackage_WriteFile ( _instance : * mut alt_IPackage , file : * mut alt_IPackage_File , buffer : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_ulonglong ) -> :: std :: os :: raw :: c_ulonglong ; } pub const alt_IPackage_Mode_ALT_IPACKAGE_MODE_READ : alt_IPackage_Mode = 0 ; pub const alt_IPackage_Mode_ALT_IPACKAGE_MODE_WRITE : alt_IPackage_Mode = 1 ; pub type alt_IPackage_Mode = i32 ; pub const alt_IPackage_SeekOrigin_ALT_IPACKAGE_SEEKORIGIN_SET : alt_IPackage_SeekOrigin = 0 ; pub const alt_IPackage_SeekOrigin_ALT_IPACKAGE_SEEKORIGIN_CUR : alt_IPackage_SeekOrigin = 1 ; pub const alt_IPackage_SeekOrigin_ALT_IPACKAGE_SEEKORIGIN_END : alt_IPackage_SeekOrigin = 2 ; pub type alt_IPackage_SeekOrigin = i32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IPackage_File { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IPackage_File ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IPackage_File > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IPackage_File ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IPackage_File > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IPackage_File ) ) ) ; } extern "C" { pub fn alt_IPackage_File_Assign_constIPackage_FileRef ( _instance : * mut alt_IPackage_File , _p0 : * mut alt_IPackage_File ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IScriptRuntime { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IScriptRuntime ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IScriptRuntime > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IScriptRuntime ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IScriptRuntime > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IScriptRuntime ) ) ) ; } extern "C" { pub fn alt_IScriptRuntime_CreateResource ( _instance : * mut alt_IScriptRuntime , info : * mut alt_IResource_CreationInfo ) -> * mut alt_IResource ; } extern "C" { pub fn alt_IScriptRuntime_RemoveResource ( _instance : * mut alt_IScriptRuntime , resource : * mut alt_IResource ) ; } extern "C" { pub fn alt_IScriptRuntime_OnTick ( _instance : * mut alt_IScriptRuntime ) ; } extern "C" { pub fn alt_IScriptRuntime_Assign_constIScriptRuntimeRef ( _instance : * mut alt_IScriptRuntime , _p0 : * mut alt_IScriptRuntime ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IClient { pub _address : u8 , } # [ test ] fn bindgen_test_layout_alt_IClient ( ) { assert_eq ! ( :: std :: mem :: size_of :: < alt_IClient > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( alt_IClient ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < alt_IClient > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( alt_IClient ) ) ) ; } extern "C" { pub fn alt_IClient_free ( ptr : * mut alt_IClient ) ; } extern "C" { pub fn alt_IClient_LogInfo ( _instance : * mut alt_IClient , str : * mut alt_StringView ) ; } extern "C" { pub fn alt_IClient_RegisterScriptRuntime ( _instance : * mut alt_IClient , resourceType : * mut alt_StringView , runtime : * mut alt_IScriptRuntime ) -> bool ; } extern "C" { pub fn alt_IClient_Assign_constIClientRef ( _instance : * mut alt_IClient , _p0 : * mut alt_IClient ) ; } extern "C" { pub fn alt_IClient_Assign_IClientRefRef ( _instance : * mut alt_IClient , _p0 : * mut alt_IClient ) ; } extern "C" { pub fn alt_GetSDKVersion ( ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn alt_CAPI_IScriptRuntime_Create ( CreateResourceFn : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut alt_IResource_CreationInfo ) -> * mut alt_IResource > , RemoveResourceFn : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut alt_IResource ) > , OnTickFn : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> * mut alt_IScriptRuntime ; } extern "C" { pub fn alt_CAPI_IResource_Create ( info : * mut alt_IResource_CreationInfo , InstantiateFn : :: std :: option :: Option < unsafe extern "C" fn ( ) -> bool > , StartFn : :: std :: option :: Option < unsafe extern "C" fn ( ) -> bool > , StopFn : :: std :: option :: Option < unsafe extern "C" fn ( ) -> bool > , OnEventFn : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut alt_CEvent ) -> bool > , OnTickFn : :: std :: option :: Option < unsafe extern "C" fn ( ) > , OnCreateBaseObjectFn : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut alt_IBaseObject ) > , OnRemoveBaseObjectFn : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut alt_IBaseObject ) > ) -> * mut alt_IResource ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_MValue_Storage { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct alt_IColShape { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct CWebView { pub _address : u8 , }